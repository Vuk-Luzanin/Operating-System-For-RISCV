GAS LISTING /tmp/ccK9CJjk.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option nopic
   3              		.option norelax
   4              		.attribute arch, "rv64i2p0_m2p0_a2p0"
   5              		.attribute unaligned_access, 0
   6              		.attribute stack_align, 16
   7              		.text
   8              	.Ltext0:
   9              		.align	2
  10              		.globl	_ZN5Riscv10popSppSpieEv
  12              	_ZN5Riscv10popSppSpieEv:
  13              	.LFB32:
  14              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** 
   2:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   3:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   4:src/Riscv.cpp **** #include "../h/TCB.hpp"
   5:src/Riscv.cpp **** #include "../h/SleepingQueue.hpp"
   6:src/Riscv.cpp **** #include "../h/Console.hpp"
   7:src/Riscv.cpp **** #include "../h/Semaphore.hpp"
   8:src/Riscv.cpp **** #include "../test/printing.hpp"
   9:src/Riscv.cpp **** #include "../h/syscall_c.hpp"
  10:src/Riscv.cpp **** 
  11:src/Riscv.cpp **** int Riscv::brojac = 0;
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** // iz ove funkcije zelimo da se vratimo tamo odakle je pozvana, a ne na sepc (po defaultu je tako, 
  14:src/Riscv.cpp **** void Riscv::popSppSpie() {
  15              		.loc 1 14 26
  16              		.cfi_startproc
  17 0000 130101FF 		addi	sp,sp,-16
  18              		.cfi_def_cfa_offset 16
  19 0004 23348100 		sd	s0,8(sp)
  20              		.cfi_offset 8, -8
  21 0008 13040101 		addi	s0,sp,16
  22              		.cfi_def_cfa 8, 0
  15:src/Riscv.cpp ****     if (TCB::userMode) {
  23              		.loc 1 15 5
  24 000c 97070000 		lbu	a5,_ZN3TCB8userModeE
  24      83C70700 
  25 0014 63860700 		beqz	a5,.L2
  16:src/Riscv.cpp ****         mc_sstatus(SSTATUS_SPP);
  26              		.loc 1 16 9
  27              	.LVL0:
  28              	.LBB48:
  29              	.LBB49:
  30              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** 
   2:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   3:src/../h/Riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   6:src/../h/Riscv.hpp **** #include "../h/TCB.hpp"
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** class Riscv
   9:src/../h/Riscv.hpp **** {
  10:src/../h/Riscv.hpp **** public:
  11:src/../h/Riscv.hpp ****     static int brojac;  //za takt
GAS LISTING /tmp/ccK9CJjk.s 			page 2


  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non-inline function) - da bi se pozivala,
  14:src/../h/Riscv.hpp ****     static void popSppSpie();
  15:src/../h/Riscv.hpp **** 
  16:src/../h/Riscv.hpp ****     //podmetanje a0, na stek (sacuvan kontekst)
  17:src/../h/Riscv.hpp ****     static void setA0onStack();
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     // push x3..x31 registers onto stack
  20:src/../h/Riscv.hpp ****     static void pushRegisters();        //mangling jer ih definisemo u asembleru
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     // pop x3..x31 registers onto stack
  23:src/../h/Riscv.hpp ****     static void popRegisters();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     // read register scause
  26:src/../h/Riscv.hpp ****     static uint64 r_scause();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     // write register scause
  29:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     // read register sepc
  32:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     // write register sepc
  35:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     // read register stvec
  38:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp ****     // write register stvec
  41:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     // read register stval
  44:src/../h/Riscv.hpp ****     static uint64 r_stval();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp ****     // write register stval
  47:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSip
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  52:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  53:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     // mask set register sip
  57:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     // mask clear register sip
  60:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     // read register sip
  63:src/../h/Riscv.hpp ****     static uint64 r_sip();
  64:src/../h/Riscv.hpp **** 
  65:src/../h/Riscv.hpp ****     // write register sip
  66:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp ****     enum BitMaskSstatus
GAS LISTING /tmp/ccK9CJjk.s 			page 3


  69:src/../h/Riscv.hpp ****     {
  70:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  71:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  72:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  73:src/../h/Riscv.hpp ****     };
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     // mask set register sstatus
  76:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp ****     // mask clear register sstatus
  79:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp ****     // read register sstatus
  82:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  83:src/../h/Riscv.hpp **** 
  84:src/../h/Riscv.hpp ****     // write register sstatus
  85:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp ****     // supervisor trap
  88:src/../h/Riscv.hpp ****     static void supervisorTrap();       // is implemented in .S file
  89:src/../h/Riscv.hpp **** 
  90:src/../h/Riscv.hpp **** private:
  91:src/../h/Riscv.hpp ****     // CONSTANTS
  92:src/../h/Riscv.hpp ****     static const uint64 bntOne = 1UL << 63;
  93:src/../h/Riscv.hpp ****     static const uint64 bntZero = 0UL;
  94:src/../h/Riscv.hpp ****     static const uint64 timerInt = bntOne + 1UL;
  95:src/../h/Riscv.hpp ****     static const uint64 hwInt = bntOne + 9UL;
  96:src/../h/Riscv.hpp ****     static const uint64 opInt = bntZero + 2UL;
  97:src/../h/Riscv.hpp ****     static const uint64 addrRdInt = bntZero + 5UL;
  98:src/../h/Riscv.hpp ****     static const uint64 addrWrInt = bntZero + 7UL;
  99:src/../h/Riscv.hpp ****     static const uint64 ecallUsrInt = bntZero + 8UL;
 100:src/../h/Riscv.hpp ****     static const uint64 ecallSysInt = bntZero + 9UL;
 101:src/../h/Riscv.hpp **** 
 102:src/../h/Riscv.hpp **** 
 103:src/../h/Riscv.hpp ****     // supervisor trap handler
 104:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
 105:src/../h/Riscv.hpp **** 
 106:src/../h/Riscv.hpp ****     static void changePrivMode();
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp ****     friend class mySemaphore;
 109:src/../h/Riscv.hpp ****     friend class TCB;
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** };
 112:src/../h/Riscv.hpp **** 
 113:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
 114:src/../h/Riscv.hpp **** {
 115:src/../h/Riscv.hpp ****     uint64 volatile scause;
 116:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 117:src/../h/Riscv.hpp ****     return scause;
 118:src/../h/Riscv.hpp **** }
 119:src/../h/Riscv.hpp **** 
 120:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 121:src/../h/Riscv.hpp **** {
 122:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 123:src/../h/Riscv.hpp **** }
 124:src/../h/Riscv.hpp **** 
 125:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
GAS LISTING /tmp/ccK9CJjk.s 			page 4


 126:src/../h/Riscv.hpp **** {
 127:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 128:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 129:src/../h/Riscv.hpp ****     return sepc;
 130:src/../h/Riscv.hpp **** }
 131:src/../h/Riscv.hpp **** 
 132:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 133:src/../h/Riscv.hpp **** {
 134:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 135:src/../h/Riscv.hpp **** }
 136:src/../h/Riscv.hpp **** 
 137:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 138:src/../h/Riscv.hpp **** {
 139:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 140:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 141:src/../h/Riscv.hpp ****     return stvec;
 142:src/../h/Riscv.hpp **** }
 143:src/../h/Riscv.hpp **** 
 144:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 145:src/../h/Riscv.hpp **** {
 146:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 147:src/../h/Riscv.hpp **** }
 148:src/../h/Riscv.hpp **** 
 149:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 150:src/../h/Riscv.hpp **** {
 151:src/../h/Riscv.hpp ****     uint64 volatile stval;
 152:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 153:src/../h/Riscv.hpp ****     return stval;
 154:src/../h/Riscv.hpp **** }
 155:src/../h/Riscv.hpp **** 
 156:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 157:src/../h/Riscv.hpp **** {
 158:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 159:src/../h/Riscv.hpp **** }
 160:src/../h/Riscv.hpp **** 
 161:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 162:src/../h/Riscv.hpp **** {
 163:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 164:src/../h/Riscv.hpp **** }
 165:src/../h/Riscv.hpp **** 
 166:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 167:src/../h/Riscv.hpp **** {
 168:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 169:src/../h/Riscv.hpp **** }
 170:src/../h/Riscv.hpp **** 
 171:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 172:src/../h/Riscv.hpp **** {
 173:src/../h/Riscv.hpp ****     uint64 volatile sip;
 174:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 175:src/../h/Riscv.hpp ****     return sip;
 176:src/../h/Riscv.hpp **** }
 177:src/../h/Riscv.hpp **** 
 178:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 179:src/../h/Riscv.hpp **** {
 180:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 181:src/../h/Riscv.hpp **** }
 182:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccK9CJjk.s 			page 5


 183:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 184:src/../h/Riscv.hpp **** {
 185:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 186:src/../h/Riscv.hpp **** }
 187:src/../h/Riscv.hpp **** 
 188:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 189:src/../h/Riscv.hpp **** {
 190:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
  31              		.loc 2 190 5
  32              		.loc 2 190 68 is_stmt 0
  33 0018 93070010 		li	a5,256
  34              	 #APP
  35              	# 190 "src/../h/Riscv.hpp" 1
 191              	}
  36              		csrc sstatus, a5
  37              	# 0 "" 2
  38              	.LVL1:
  39              	 #NO_APP
  40              	.L2:
  41              	.LBE49:
  42              	.LBE48:
  17:src/Riscv.cpp ****     }
  18:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  43              		.loc 1 18 5 is_stmt 1
  44              		.loc 1 18 39 is_stmt 0
  45              	 #APP
  46              	# 18 "src/Riscv.cpp" 1
  19              	    __asm__ volatile ("sret");          //threadWrapper se poziva iz prekidne rutine, pa cem ona ov
  47              		csrw sepc, ra
  48              	# 0 "" 2
  49              		.loc 1 19 5 is_stmt 1
  50              		.loc 1 19 30 is_stmt 0
  51              	# 19 "src/Riscv.cpp" 1
  20              	}
  52              		sret
  53              	# 0 "" 2
  54              		.loc 1 20 1
  55              	 #NO_APP
  56 0028 03348100 		ld	s0,8(sp)
  57              		.cfi_restore 8
  58              		.cfi_def_cfa 2, 16
  59 002c 13010101 		addi	sp,sp,16
  60              		.cfi_def_cfa_offset 0
  61 0030 67800000 		jr	ra
  62              		.cfi_endproc
  63              	.LFE32:
  65              		.align	2
  66              		.globl	_ZN5Riscv12setA0onStackEv
  68              	_ZN5Riscv12setA0onStackEv:
  69              	.LFB34:
  21:src/Riscv.cpp **** 
  22:src/Riscv.cpp **** //implementirano na vezbama -> glavni deo prekidne rutine
  23:src/Riscv.cpp **** void Riscv::handleSupervisorTrap() {
  24:src/Riscv.cpp ****     //read args
  25:src/Riscv.cpp ****     uint64 volatile arg1, arg2, arg3, arg4;
  26:src/Riscv.cpp ****     __asm__ volatile("mv %0, a1" : "=r"(arg1));
  27:src/Riscv.cpp ****     __asm__ volatile("mv %0, a2" : "=r"(arg2));
GAS LISTING /tmp/ccK9CJjk.s 			page 6


  28:src/Riscv.cpp ****     __asm__ volatile("mv %0, a3" : "=r"(arg3));
  29:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(arg4));
  30:src/Riscv.cpp ****     uint64 volatile opCode;
  31:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(opCode));
  32:src/Riscv.cpp **** 
  33:src/Riscv.cpp ****     __asm__ volatile("csrr %0, sscratch" : "=r"(TCB::running->ecallSP));     // ssratch <= sp
  34:src/Riscv.cpp **** 
  35:src/Riscv.cpp ****     uint64 volatile scause = Riscv::r_scause();         // read scause
  36:src/Riscv.cpp **** 
  37:src/Riscv.cpp ****     switch (scause) {
  38:src/Riscv.cpp ****         case timerInt: {
  39:src/Riscv.cpp ****             brojac++;
  40:src/Riscv.cpp ****             if (brojac % 2 == 0) {
  41:src/Riscv.cpp ****                 SleepingQueue::wakeUpTCBs();                      //try to wake up
  42:src/Riscv.cpp ****                 mySemaphore::tryToUnblockTimer();                 //try to unblock
  43:src/Riscv.cpp ****             }
  44:src/Riscv.cpp **** 
  45:src/Riscv.cpp ****             TCB::timeSliceCounter++;
  46:src/Riscv.cpp ****             if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
  47:src/Riscv.cpp ****                 uint64 volatile sepc = r_sepc();
  48:src/Riscv.cpp ****                 uint64 volatile sstatus = r_sstatus();
  49:src/Riscv.cpp ****                 TCB::timeSliceCounter = 0;
  50:src/Riscv.cpp ****                 TCB::dispatch();
  51:src/Riscv.cpp ****                 w_sstatus(sstatus);
  52:src/Riscv.cpp ****                 w_sepc(sepc);
  53:src/Riscv.cpp ****             }
  54:src/Riscv.cpp ****             mc_sip(SIP_SSIP);
  55:src/Riscv.cpp ****             break;
  56:src/Riscv.cpp ****         }
  57:src/Riscv.cpp ****         case hwInt: {                   //only from console
  58:src/Riscv.cpp ****             //console_handler();
  59:src/Riscv.cpp ****             uint64 volatile sepc = r_sepc();
  60:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
  61:src/Riscv.cpp **** 
  62:src/Riscv.cpp ****             char console_status = *((char*) CONSOLE_STATUS);        //8 bits
  63:src/Riscv.cpp ****             if (console_status & CONSOLE_RX_STATUS_BIT) {           //can read
  64:src/Riscv.cpp ****                 char data = *((char *) CONSOLE_RX_DATA);
  65:src/Riscv.cpp ****                 if (myConsole::numberOfCharToGet>0) {
  66:src/Riscv.cpp ****                     myConsole::numberOfCharToGet--;
  67:src/Riscv.cpp ****                     myConsole::putCInBuff(data);
  68:src/Riscv.cpp ****                 }
  69:src/Riscv.cpp ****             }
  70:src/Riscv.cpp ****             plic_complete(plic_claim());                //done
  71:src/Riscv.cpp ****             w_sstatus(sstatus);
  72:src/Riscv.cpp ****             w_sepc(sepc);
  73:src/Riscv.cpp ****             break;
  74:src/Riscv.cpp ****         }
  75:src/Riscv.cpp ****         case opInt: {
  76:src/Riscv.cpp ****             //printString("Operation Interrupt\n");
  77:src/Riscv.cpp ****             TCB::prepareThreadExit();
  78:src/Riscv.cpp ****             break;
  79:src/Riscv.cpp ****         }
  80:src/Riscv.cpp ****         case addrRdInt: {
  81:src/Riscv.cpp ****             //printString("Invalid Read Interrupt\n");
  82:src/Riscv.cpp ****             TCB::prepareThreadExit();
  83:src/Riscv.cpp ****             break;
  84:src/Riscv.cpp ****         }
GAS LISTING /tmp/ccK9CJjk.s 			page 7


  85:src/Riscv.cpp ****         case addrWrInt: {
  86:src/Riscv.cpp ****             //printString("Invalid Write Interrupt\n");
  87:src/Riscv.cpp ****             TCB::prepareThreadExit();
  88:src/Riscv.cpp ****             break;
  89:src/Riscv.cpp ****         }
  90:src/Riscv.cpp ****         case ecallSysInt:
  91:src/Riscv.cpp ****         case ecallUsrInt: {
  92:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc() + 4;       // - adresa nakon ecall -cuvamo na st
  93:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
  94:src/Riscv.cpp **** 
  95:src/Riscv.cpp ****             switch (opCode) {
  96:src/Riscv.cpp ****                 case MemoryAllocator::MEM_ALLOC_CODE: {
  97:src/Riscv.cpp ****                     MemoryAllocator::prepareMemAlloc(arg1);
  98:src/Riscv.cpp ****                     break;
  99:src/Riscv.cpp ****                 }
 100:src/Riscv.cpp ****                 case MemoryAllocator::MEM_FREE_CODE: {
 101:src/Riscv.cpp ****                     MemoryAllocator::prepareMemFree(arg1);
 102:src/Riscv.cpp ****                     break;
 103:src/Riscv.cpp ****                 }
 104:src/Riscv.cpp ****                 case TCB::THREAD_CREATE: {
 105:src/Riscv.cpp ****                     TCB::prepareThreadCreate((thread_t*) arg1, (TCB::Body) arg2, (void*) arg3, (voi
 106:src/Riscv.cpp ****                     break;
 107:src/Riscv.cpp ****                 }
 108:src/Riscv.cpp ****                 case TCB::THREAD_EXIT: {
 109:src/Riscv.cpp ****                     TCB::prepareThreadExit();
 110:src/Riscv.cpp ****                     break;
 111:src/Riscv.cpp ****                 }
 112:src/Riscv.cpp ****                 case TCB::THREAD_DISPATCH: {
 113:src/Riscv.cpp ****                     TCB::dispatch();
 114:src/Riscv.cpp ****                     break;
 115:src/Riscv.cpp ****                 }
 116:src/Riscv.cpp ****                 case mySemaphore::SEM_OPEN: {
 117:src/Riscv.cpp ****                     mySemaphore::prepareSemOpen((sem_t*) arg1, (unsigned) arg2);
 118:src/Riscv.cpp ****                     break;
 119:src/Riscv.cpp ****                 }
 120:src/Riscv.cpp ****                 case mySemaphore::SEM_CLOSE: {
 121:src/Riscv.cpp ****                     mySemaphore::prepareSemClose((sem_t) arg1);
 122:src/Riscv.cpp ****                     break;
 123:src/Riscv.cpp ****                 }
 124:src/Riscv.cpp ****                 case mySemaphore::SEM_WAIT: {
 125:src/Riscv.cpp ****                     mySemaphore::prepareSemWait((sem_t) arg1);
 126:src/Riscv.cpp ****                     break;
 127:src/Riscv.cpp ****                 }
 128:src/Riscv.cpp ****                 case mySemaphore::SEM_SIGNAL: {
 129:src/Riscv.cpp ****                     mySemaphore::prepareSemSignal((sem_t) arg1);
 130:src/Riscv.cpp ****                     break;
 131:src/Riscv.cpp ****                 }
 132:src/Riscv.cpp ****                 case mySemaphore::SEM_TIMED_WAIT: {
 133:src/Riscv.cpp ****                     mySemaphore::prepareSemTimedWait((sem_t) arg1, (time_t) arg2);
 134:src/Riscv.cpp ****                     break;
 135:src/Riscv.cpp ****                 }
 136:src/Riscv.cpp ****                 case mySemaphore::SEM_TRY_WAIT: {
 137:src/Riscv.cpp ****                     mySemaphore::prepareSemTryWait((sem_t) arg1);
 138:src/Riscv.cpp ****                     break;
 139:src/Riscv.cpp ****                 }
 140:src/Riscv.cpp ****                 case TCB::THREAD_TIME_SLEEP: {
 141:src/Riscv.cpp ****                     TCB::prepareTimeSleep((time_t) arg1);
GAS LISTING /tmp/ccK9CJjk.s 			page 8


 142:src/Riscv.cpp ****                     break;
 143:src/Riscv.cpp ****                 }
 144:src/Riscv.cpp ****                 case myConsole::CONSOLE_GETC: {
 145:src/Riscv.cpp ****                     myConsole::prepareGetC();
 146:src/Riscv.cpp ****                     break;
 147:src/Riscv.cpp ****                 }
 148:src/Riscv.cpp ****                 case myConsole::CONSOLE_PUTC: {
 149:src/Riscv.cpp ****                     myConsole::preparePutC((char) arg1);
 150:src/Riscv.cpp ****                     break;
 151:src/Riscv.cpp ****                 }
 152:src/Riscv.cpp ****                 case myConsole::CONSOLE_PUTC_HELPER: {
 153:src/Riscv.cpp ****                     char res = myConsole::getCOutBuff();
 154:src/Riscv.cpp ****                     __asm__ volatile("mv a0, %0" : :"r"((uint64)res));
 155:src/Riscv.cpp ****                     //save a0 on old context stack
 156:src/Riscv.cpp ****                     Riscv::setA0onStack();
 157:src/Riscv.cpp ****                     break;
 158:src/Riscv.cpp ****                 }
 159:src/Riscv.cpp ****             }
 160:src/Riscv.cpp ****             w_sstatus(sstatus);
 161:src/Riscv.cpp ****             w_sepc(sepc);
 162:src/Riscv.cpp ****             break;
 163:src/Riscv.cpp ****         }
 164:src/Riscv.cpp ****     }
 165:src/Riscv.cpp **** }
 166:src/Riscv.cpp **** 
 167:src/Riscv.cpp **** void Riscv::setA0onStack() {        //podmetanje povratne vrednosti u stari kontekst
  70              		.loc 1 167 28 is_stmt 1
  71              		.cfi_startproc
  72 0034 130101FF 		addi	sp,sp,-16
  73              		.cfi_def_cfa_offset 16
  74 0038 23348100 		sd	s0,8(sp)
  75              		.cfi_offset 8, -8
  76 003c 13040101 		addi	s0,sp,16
  77              		.cfi_def_cfa 8, 0
 168:src/Riscv.cpp **** //save a0 on old context stack
 169:src/Riscv.cpp ****     uint64 save;
  78              		.loc 1 169 5
 170:src/Riscv.cpp ****     __asm__ volatile("mv %0, a1" : "=r"(save));
  79              		.loc 1 170 5
  80              		.loc 1 170 47 is_stmt 0
  81              	 #APP
  82              	# 170 "src/Riscv.cpp" 1
 171              	    __asm__ volatile("mv a1, %0" : : "r"(TCB::running->ecallSP));   //TCB::running->tsmp = sp
  83              		mv a5, a1
  84              	# 0 "" 2
  85              	.LVL2:
  86              		.loc 1 171 5 is_stmt 1
  87              		.loc 1 171 56 is_stmt 0
  88              	 #NO_APP
  89 0044 17070000 		ld	a4,_ZN3TCB7runningE
  89      03370700 
  90 004c 03370700 		ld	a4,0(a4)
  91              		.loc 1 171 65
  92              	 #APP
  93              	# 171 "src/Riscv.cpp" 1
 172              	    __asm__ volatile("sd a0, 80(a1)");                          // x10 = a0 register -> podmece se 
  94              		mv a1, a4
GAS LISTING /tmp/ccK9CJjk.s 			page 9


  95              	# 0 "" 2
  96              		.loc 1 172 5 is_stmt 1
  97              		.loc 1 172 38 is_stmt 0
  98              	# 172 "src/Riscv.cpp" 1
 173              	    __asm__ volatile("mv a1, %0" : : "r"(save));
  99              		sd a0, 80(a1)
 100              	# 0 "" 2
 101              		.loc 1 173 5 is_stmt 1
 102              		.loc 1 173 48 is_stmt 0
 103              	# 173 "src/Riscv.cpp" 1
 174              	}
 104              		mv a1, a5
 105              	# 0 "" 2
 106              		.loc 1 174 1
 107              	 #NO_APP
 108 005c 03348100 		ld	s0,8(sp)
 109              		.cfi_restore 8
 110              		.cfi_def_cfa 2, 16
 111 0060 13010101 		addi	sp,sp,16
 112              		.cfi_def_cfa_offset 0
 113 0064 67800000 		jr	ra
 114              		.cfi_endproc
 115              	.LFE34:
 117              		.align	2
 118              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 120              	_ZN5Riscv20handleSupervisorTrapEv:
 121              	.LFB33:
  23:src/Riscv.cpp ****     //read args
 122              		.loc 1 23 36 is_stmt 1
 123              		.cfi_startproc
 124 0068 130101F5 		addi	sp,sp,-176
 125              		.cfi_def_cfa_offset 176
 126 006c 2334110A 		sd	ra,168(sp)
 127 0070 2330810A 		sd	s0,160(sp)
 128              		.cfi_offset 1, -8
 129              		.cfi_offset 8, -16
 130 0074 1304010B 		addi	s0,sp,176
 131              		.cfi_def_cfa 8, 0
  25:src/Riscv.cpp ****     __asm__ volatile("mv %0, a1" : "=r"(arg1));
 132              		.loc 1 25 5
  26:src/Riscv.cpp ****     __asm__ volatile("mv %0, a2" : "=r"(arg2));
 133              		.loc 1 26 5
  26:src/Riscv.cpp ****     __asm__ volatile("mv %0, a2" : "=r"(arg2));
 134              		.loc 1 26 47 is_stmt 0
 135              	 #APP
 136              	# 26 "src/Riscv.cpp" 1
 137              		mv a5, a1
 138              	# 0 "" 2
 139              	 #NO_APP
 140 007c 2334F4FE 		sd	a5,-24(s0)
  27:src/Riscv.cpp ****     __asm__ volatile("mv %0, a3" : "=r"(arg3));
 141              		.loc 1 27 5 is_stmt 1
  27:src/Riscv.cpp ****     __asm__ volatile("mv %0, a3" : "=r"(arg3));
 142              		.loc 1 27 47 is_stmt 0
 143              	 #APP
 144              	# 27 "src/Riscv.cpp" 1
 145              		mv a5, a2
GAS LISTING /tmp/ccK9CJjk.s 			page 10


 146              	# 0 "" 2
 147              	 #NO_APP
 148 0084 2330F4FE 		sd	a5,-32(s0)
  28:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(arg4));
 149              		.loc 1 28 5 is_stmt 1
  28:src/Riscv.cpp ****     __asm__ volatile("mv %0, a4" : "=r"(arg4));
 150              		.loc 1 28 47 is_stmt 0
 151              	 #APP
 152              	# 28 "src/Riscv.cpp" 1
 153              		mv a5, a3
 154              	# 0 "" 2
 155              	 #NO_APP
 156 008c 233CF4FC 		sd	a5,-40(s0)
  29:src/Riscv.cpp ****     uint64 volatile opCode;
 157              		.loc 1 29 5 is_stmt 1
  29:src/Riscv.cpp ****     uint64 volatile opCode;
 158              		.loc 1 29 47 is_stmt 0
 159              	 #APP
 160              	# 29 "src/Riscv.cpp" 1
 161              		mv a5, a4
 162              	# 0 "" 2
 163              	 #NO_APP
 164 0094 2338F4FC 		sd	a5,-48(s0)
  30:src/Riscv.cpp ****     __asm__ volatile("mv %0, a0" : "=r"(opCode));
 165              		.loc 1 30 5 is_stmt 1
  31:src/Riscv.cpp **** 
 166              		.loc 1 31 5
  31:src/Riscv.cpp **** 
 167              		.loc 1 31 49 is_stmt 0
 168              	 #APP
 169              	# 31 "src/Riscv.cpp" 1
 170              		mv a5, a0
 171              	# 0 "" 2
 172              	 #NO_APP
 173 009c 2334F4FC 		sd	a5,-56(s0)
  33:src/Riscv.cpp **** 
 174              		.loc 1 33 5 is_stmt 1
  33:src/Riscv.cpp **** 
 175              		.loc 1 33 72 is_stmt 0
 176              	 #APP
 177              	# 33 "src/Riscv.cpp" 1
 178              		csrr a4, sscratch
 179              	# 0 "" 2
 180              	 #NO_APP
 181 00a4 97070000 		ld	a5,_ZN3TCB7runningE
 181      83B70700 
 182 00ac 23B0E700 		sd	a4,0(a5)
  35:src/Riscv.cpp **** 
 183              		.loc 1 35 5 is_stmt 1
 184              	.LBB50:
 185              	.LBB51:
 115:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 186              		.loc 2 115 5
 116:src/../h/Riscv.hpp ****     return scause;
 187              		.loc 2 116 5
 116:src/../h/Riscv.hpp ****     return scause;
 188              		.loc 2 116 72 is_stmt 0
GAS LISTING /tmp/ccK9CJjk.s 			page 11


 189              	 #APP
 190              	# 116 "src/../h/Riscv.hpp" 1
 191              		csrr a5, scause
 192              	# 0 "" 2
 193              	 #NO_APP
 194 00b4 2334F4F8 		sd	a5,-120(s0)
 117:src/../h/Riscv.hpp **** }
 195              		.loc 2 117 5 is_stmt 1
 117:src/../h/Riscv.hpp **** }
 196              		.loc 2 117 12 is_stmt 0
 197 00b8 833784F8 		ld	a5,-120(s0)
 198              	.LBE51:
 199              	.LBE50:
  35:src/Riscv.cpp **** 
 200              		.loc 1 35 46
 201 00bc 2330F4FC 		sd	a5,-64(s0)
  37:src/Riscv.cpp ****         case timerInt: {
 202              		.loc 1 37 5 is_stmt 1
 203              	.LBB52:
  37:src/Riscv.cpp ****         case timerInt: {
 204              		.loc 1 37 13 is_stmt 0
 205 00c0 833704FC 		ld	a5,-64(s0)
  37:src/Riscv.cpp ****         case timerInt: {
 206              		.loc 1 37 5
 207 00c4 13079000 		li	a4,9
 208 00c8 636EF702 		bgtu	a5,a4,.L7
 209 00cc 13078000 		li	a4,8
 210 00d0 63FCE718 		bgeu	a5,a4,.L8
 211 00d4 13075000 		li	a4,5
 212 00d8 6382E718 		beq	a5,a4,.L9
 213 00dc 13077000 		li	a4,7
 214 00e0 6398E700 		bne	a5,a4,.L37
 215              	.LBB53:
  85:src/Riscv.cpp ****             //printString("Invalid Write Interrupt\n");
 216              		.loc 1 85 9 is_stmt 1
  85:src/Riscv.cpp ****             //printString("Invalid Write Interrupt\n");
 217              		.loc 1 85 25
  87:src/Riscv.cpp ****             break;
 218              		.loc 1 87 13
  87:src/Riscv.cpp ****             break;
 219              		.loc 1 87 35 is_stmt 0
 220 00e4 97000000 		call	_ZN3TCB17prepareThreadExitEv
 220      E7800000 
 221              	.LVL3:
  88:src/Riscv.cpp ****         }
 222              		.loc 1 88 13 is_stmt 1
 223 00ec 6F00000F 		j	.L6
 224              	.L37:
 225              	.LBE53:
  37:src/Riscv.cpp ****         case timerInt: {
 226              		.loc 1 37 5 is_stmt 0
 227 00f0 13072000 		li	a4,2
 228 00f4 6394E70E 		bne	a5,a4,.L6
 229              	.LBB100:
  75:src/Riscv.cpp ****             //printString("Operation Interrupt\n");
 230              		.loc 1 75 9 is_stmt 1
  75:src/Riscv.cpp ****             //printString("Operation Interrupt\n");
GAS LISTING /tmp/ccK9CJjk.s 			page 12


 231              		.loc 1 75 21
  77:src/Riscv.cpp ****             break;
 232              		.loc 1 77 13
  77:src/Riscv.cpp ****             break;
 233              		.loc 1 77 35 is_stmt 0
 234 00f8 97000000 		call	_ZN3TCB17prepareThreadExitEv
 234      E7800000 
 235              	.LVL4:
  78:src/Riscv.cpp ****         }
 236              		.loc 1 78 13 is_stmt 1
 237 0100 6F00C00D 		j	.L6
 238              	.L7:
 239              	.LBE100:
  37:src/Riscv.cpp ****         case timerInt: {
 240              		.loc 1 37 5 is_stmt 0
 241 0104 1307F0FF 		li	a4,-1
 242 0108 1317F703 		slli	a4,a4,63
 243 010c 13071700 		addi	a4,a4,1
 244 0110 6382E708 		beq	a5,a4,.L13
 245 0114 1307F0FF 		li	a4,-1
 246 0118 1317F703 		slli	a4,a4,63
 247 011c 13079700 		addi	a4,a4,9
 248 0120 639EE70A 		bne	a5,a4,.L6
 249              	.LBB101:
  57:src/Riscv.cpp ****             //console_handler();
 250              		.loc 1 57 9 is_stmt 1
  57:src/Riscv.cpp ****             //console_handler();
 251              		.loc 1 57 21
 252              	.LBB54:
  59:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 253              		.loc 1 59 13
 254              	.LBB55:
 255              	.LBB56:
 127:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 256              		.loc 2 127 5
 128:src/../h/Riscv.hpp ****     return sepc;
 257              		.loc 2 128 5
 128:src/../h/Riscv.hpp ****     return sepc;
 258              		.loc 2 128 64 is_stmt 0
 259              	 #APP
 260              	# 128 "src/../h/Riscv.hpp" 1
 261              		csrr a5, sepc
 262              	# 0 "" 2
 263              	 #NO_APP
 264 0128 2334F4FA 		sd	a5,-88(s0)
 129:src/../h/Riscv.hpp **** }
 265              		.loc 2 129 5 is_stmt 1
 129:src/../h/Riscv.hpp **** }
 266              		.loc 2 129 12 is_stmt 0
 267 012c 833784FA 		ld	a5,-88(s0)
 268              	.LBE56:
 269              	.LBE55:
  59:src/Riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 270              		.loc 1 59 43
 271 0130 2334F4F6 		sd	a5,-152(s0)
  60:src/Riscv.cpp **** 
 272              		.loc 1 60 13 is_stmt 1
GAS LISTING /tmp/ccK9CJjk.s 			page 13


 273              	.LBB57:
 274              	.LBB58:
 192:src/../h/Riscv.hpp **** 
 193:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 194:src/../h/Riscv.hpp **** {
 195:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 275              		.loc 2 195 5
 196:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 276              		.loc 2 196 5
 277              		.loc 2 196 76 is_stmt 0
 278              	 #APP
 279              	# 196 "src/../h/Riscv.hpp" 1
 197              	    return sstatus;
 280              		csrr a5, sstatus
 281              	# 0 "" 2
 282              	 #NO_APP
 283 0138 2330F4FA 		sd	a5,-96(s0)
 284              		.loc 2 197 5 is_stmt 1
 285              		.loc 2 197 12 is_stmt 0
 286 013c 833704FA 		ld	a5,-96(s0)
 287              	.LBE58:
 288              	.LBE57:
  60:src/Riscv.cpp **** 
 289              		.loc 1 60 49
 290 0140 2338F4F6 		sd	a5,-144(s0)
  62:src/Riscv.cpp ****             if (console_status & CONSOLE_RX_STATUS_BIT) {           //can read
 291              		.loc 1 62 13 is_stmt 1
  62:src/Riscv.cpp ****             if (console_status & CONSOLE_RX_STATUS_BIT) {           //can read
 292              		.loc 1 62 35 is_stmt 0
 293 0144 97070000 		ld	a5,CONSOLE_STATUS
 293      83B70700 
  62:src/Riscv.cpp ****             if (console_status & CONSOLE_RX_STATUS_BIT) {           //can read
 294              		.loc 1 62 18
 295 014c 83C70700 		lbu	a5,0(a5)
 296              	.LVL5:
  63:src/Riscv.cpp ****                 char data = *((char *) CONSOLE_RX_DATA);
 297              		.loc 1 63 13 is_stmt 1
 298              	.LBB59:
 299 0150 93F71700 		andi	a5,a5,1
 300              	.LVL6:
 301 0154 638E0700 		beqz	a5,.L17
 302              	.LBB60:
  64:src/Riscv.cpp ****                 if (myConsole::numberOfCharToGet>0) {
 303              		.loc 1 64 17
  64:src/Riscv.cpp ****                 if (myConsole::numberOfCharToGet>0) {
 304              		.loc 1 64 29 is_stmt 0
 305 0158 97070000 		ld	a5,CONSOLE_RX_DATA
 305      83B70700 
  64:src/Riscv.cpp ****                 if (myConsole::numberOfCharToGet>0) {
 306              		.loc 1 64 22
 307 0160 03C50700 		lbu	a0,0(a5)
 308              	.LVL7:
  65:src/Riscv.cpp ****                     myConsole::numberOfCharToGet--;
 309              		.loc 1 65 17 is_stmt 1
  65:src/Riscv.cpp ****                     myConsole::numberOfCharToGet--;
 310              		.loc 1 65 49 is_stmt 0
 311 0164 97070000 		ld	a5,_ZN9myConsole17numberOfCharToGetE
GAS LISTING /tmp/ccK9CJjk.s 			page 14


 311      83B70700 
  65:src/Riscv.cpp ****                     myConsole::numberOfCharToGet--;
 312              		.loc 1 65 17
 313 016c 639C070C 		bnez	a5,.L38
 314              	.LVL8:
 315              	.L17:
 316              	.LBE60:
 317              	.LBE59:
  70:src/Riscv.cpp ****             w_sstatus(sstatus);
 318              		.loc 1 70 13 is_stmt 1
  70:src/Riscv.cpp ****             w_sstatus(sstatus);
 319              		.loc 1 70 26 is_stmt 0
 320 0170 97000000 		call	plic_claim
 320      E7800000 
 321              	.LVL9:
 322 0178 97000000 		call	plic_complete
 322      E7800000 
 323              	.LVL10:
  71:src/Riscv.cpp ****             w_sepc(sepc);
 324              		.loc 1 71 13 is_stmt 1
  71:src/Riscv.cpp ****             w_sepc(sepc);
 325              		.loc 1 71 22 is_stmt 0
 326 0180 833704F7 		ld	a5,-144(s0)
 327              	.LVL11:
 328              	.LBB62:
 329              	.LBB63:
 198:src/../h/Riscv.hpp **** }
 199:src/../h/Riscv.hpp **** 
 200:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 201:src/../h/Riscv.hpp **** {
 202:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 330              		.loc 2 202 5 is_stmt 1
 331              		.loc 2 202 77 is_stmt 0
 332              	 #APP
 333              	# 202 "src/../h/Riscv.hpp" 1
 203              	}
 334              		csrw sstatus, a5
 335              	# 0 "" 2
 336              	.LVL12:
 337              	 #NO_APP
 338              	.LBE63:
 339              	.LBE62:
  72:src/Riscv.cpp ****             break;
 340              		.loc 1 72 13 is_stmt 1
  72:src/Riscv.cpp ****             break;
 341              		.loc 1 72 19 is_stmt 0
 342 0188 833784F6 		ld	a5,-152(s0)
 343              	.LVL13:
 344              	.LBB64:
 345              	.LBB65:
 134:src/../h/Riscv.hpp **** }
 346              		.loc 2 134 5 is_stmt 1
 134:src/../h/Riscv.hpp **** }
 347              		.loc 2 134 65 is_stmt 0
 348              	 #APP
 349              	# 134 "src/../h/Riscv.hpp" 1
 135:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccK9CJjk.s 			page 15


 350              		csrw sepc, a5
 351              	# 0 "" 2
 352              		.loc 2 135 1
 353              	 #NO_APP
 354 0190 6F00C004 		j	.L6
 355              	.LVL14:
 356              	.L13:
 357              	.LBE65:
 358              	.LBE64:
 359              	.LBE54:
  38:src/Riscv.cpp ****             brojac++;
 360              		.loc 1 38 9 is_stmt 1
  38:src/Riscv.cpp ****             brojac++;
 361              		.loc 1 38 24
 362              	.LBB67:
  39:src/Riscv.cpp ****             if (brojac % 2 == 0) {
 363              		.loc 1 39 13
  39:src/Riscv.cpp ****             if (brojac % 2 == 0) {
 364              		.loc 1 39 19 is_stmt 0
 365 0194 17070000 		lla	a4,_ZN5Riscv6brojacE
 365      13070700 
 366 019c 83270700 		lw	a5,0(a4)
 367 01a0 9B871700 		addiw	a5,a5,1
 368 01a4 2320F700 		sw	a5,0(a4)
  40:src/Riscv.cpp ****                 SleepingQueue::wakeUpTCBs();                      //try to wake up
 369              		.loc 1 40 13 is_stmt 1
  40:src/Riscv.cpp ****                 SleepingQueue::wakeUpTCBs();                      //try to wake up
 370              		.loc 1 40 28 is_stmt 0
 371 01a8 93F71700 		andi	a5,a5,1
  40:src/Riscv.cpp ****                 SleepingQueue::wakeUpTCBs();                      //try to wake up
 372              		.loc 1 40 13
 373 01ac 63800704 		beqz	a5,.L39
 374              	.L15:
  45:src/Riscv.cpp ****             if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 375              		.loc 1 45 13 is_stmt 1
  45:src/Riscv.cpp ****             if (TCB::timeSliceCounter >= TCB::running->getTimeSlice()) {
 376              		.loc 1 45 34 is_stmt 0
 377 01b0 17070000 		lla	a4,_ZN3TCB16timeSliceCounterE
 377      13070700 
 378 01b8 83370700 		ld	a5,0(a4)
 379 01bc 93871700 		addi	a5,a5,1
 380 01c0 2330F700 		sd	a5,0(a4)
  46:src/Riscv.cpp ****                 uint64 volatile sepc = r_sepc();
 381              		.loc 1 46 13 is_stmt 1
 382              	.LBB68:
  46:src/Riscv.cpp ****                 uint64 volatile sepc = r_sepc();
 383              		.loc 1 46 68 is_stmt 0
 384 01c4 17070000 		ld	a4,_ZN3TCB7runningE
 384      03370700 
 385              	.LVL15:
 386              	.LBB69:
 387              	.LBB70:
 388              		.file 3 "src/../h/../h/TCB.hpp"
   1:src/../h/../h/TCB.hpp **** 
   2:src/../h/../h/TCB.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   3:src/../h/../h/TCB.hpp **** #define PROJECT_BASE_TCB_HPP
   4:src/../h/../h/TCB.hpp **** 
GAS LISTING /tmp/ccK9CJjk.s 			page 16


   5:src/../h/../h/TCB.hpp **** #include "../lib/hw.h"
   6:src/../h/../h/TCB.hpp **** #include "Scheduler.hpp"
   7:src/../h/../h/TCB.hpp **** #include "print.hpp"
   8:src/../h/../h/TCB.hpp **** 
   9:src/../h/../h/TCB.hpp **** //IZ KNJIGE - iskoriscena stanja niti + TCB klasa je vecim delom implementirana na vezbama
  10:src/../h/../h/TCB.hpp **** enum Status {RUNNING, SUSPENDED, SLEEPING, FINISHED};
  11:src/../h/../h/TCB.hpp **** 
  12:src/../h/../h/TCB.hpp **** class TCB {
  13:src/../h/../h/TCB.hpp **** public:
  14:src/../h/../h/TCB.hpp ****     void* operator new(size_t size);
  15:src/../h/../h/TCB.hpp ****     void operator delete(void *p);
  16:src/../h/../h/TCB.hpp **** 
  17:src/../h/../h/TCB.hpp ****     ~TCB() { delete[] stack; }
  18:src/../h/../h/TCB.hpp ****     using Body = void (*) (void*);
  19:src/../h/../h/TCB.hpp ****     static TCB* createThread(Body body, void* arg, void* stack, uint64 timeSlice);
  20:src/../h/../h/TCB.hpp **** 
  21:src/../h/../h/TCB.hpp ****     Status getStatus() { return status; }
  22:src/../h/../h/TCB.hpp ****     void setStatus(Status s) { status = s; }
  23:src/../h/../h/TCB.hpp **** 
  24:src/../h/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 389              		.loc 3 24 35 is_stmt 1
 390              		.loc 3 24 42 is_stmt 0
 391 01cc 03378703 		ld	a4,56(a4)
 392              	.LVL16:
 393              	.LBE70:
 394              	.LBE69:
  46:src/Riscv.cpp ****                 uint64 volatile sepc = r_sepc();
 395              		.loc 1 46 13
 396 01d0 63F8E702 		bgeu	a5,a4,.L40
 397              	.L16:
 398              	.LBE68:
  54:src/Riscv.cpp ****             break;
 399              		.loc 1 54 13 is_stmt 1
 400              	.LVL17:
 401              	.LBB80:
 402              	.LBB81:
 168:src/../h/Riscv.hpp **** }
 403              		.loc 2 168 5
 168:src/../h/Riscv.hpp **** }
 404              		.loc 2 168 64 is_stmt 0
 405 01d4 93072000 		li	a5,2
 406              	 #APP
 407              	# 168 "src/../h/Riscv.hpp" 1
 408              		csrc sip, a5
 409              	# 0 "" 2
 410              	.LVL18:
 411              	 #NO_APP
 412              	.L6:
 413              	.LBE81:
 414              	.LBE80:
 415              	.LBE67:
 416              	.LBE101:
 417              	.LBE52:
 165:src/Riscv.cpp **** 
 418              		.loc 1 165 1
 419 01dc 8330810A 		ld	ra,168(sp)
 420              		.cfi_remember_state
GAS LISTING /tmp/ccK9CJjk.s 			page 17


 421              		.cfi_restore 1
 422 01e0 0334010A 		ld	s0,160(sp)
 423              		.cfi_restore 8
 424              		.cfi_def_cfa 2, 176
 425 01e4 1301010B 		addi	sp,sp,176
 426              		.cfi_def_cfa_offset 0
 427 01e8 67800000 		jr	ra
 428              	.L39:
 429              		.cfi_restore_state
 430              	.LBB104:
 431              	.LBB102:
 432              	.LBB83:
  41:src/Riscv.cpp ****                 mySemaphore::tryToUnblockTimer();                 //try to unblock
 433              		.loc 1 41 17 is_stmt 1
  41:src/Riscv.cpp ****                 mySemaphore::tryToUnblockTimer();                 //try to unblock
 434              		.loc 1 41 42 is_stmt 0
 435 01ec 97000000 		call	_ZN13SleepingQueue10wakeUpTCBsEv
 435      E7800000 
 436              	.LVL19:
  42:src/Riscv.cpp ****             }
 437              		.loc 1 42 17 is_stmt 1
  42:src/Riscv.cpp ****             }
 438              		.loc 1 42 47 is_stmt 0
 439 01f4 97000000 		call	_ZN11mySemaphore17tryToUnblockTimerEv
 439      E7800000 
 440              	.LVL20:
 441 01fc 6FF05FFB 		j	.L15
 442              	.L40:
 443              	.LBB82:
 444              	.LBB71:
  47:src/Riscv.cpp ****                 uint64 volatile sstatus = r_sstatus();
 445              		.loc 1 47 17 is_stmt 1
 446              	.LBB72:
 447              	.LBB73:
 127:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 448              		.loc 2 127 5
 128:src/../h/Riscv.hpp ****     return sepc;
 449              		.loc 2 128 5
 128:src/../h/Riscv.hpp ****     return sepc;
 450              		.loc 2 128 64 is_stmt 0
 451              	 #APP
 452              	# 128 "src/../h/Riscv.hpp" 1
 453              		csrr a5, sepc
 454              	# 0 "" 2
 455              	 #NO_APP
 456 0204 233CF4F8 		sd	a5,-104(s0)
 129:src/../h/Riscv.hpp **** }
 457              		.loc 2 129 5 is_stmt 1
 129:src/../h/Riscv.hpp **** }
 458              		.loc 2 129 12 is_stmt 0
 459 0208 833784F9 		ld	a5,-104(s0)
 460              	.LBE73:
 461              	.LBE72:
  47:src/Riscv.cpp ****                 uint64 volatile sstatus = r_sstatus();
 462              		.loc 1 47 47
 463 020c 233CF4F4 		sd	a5,-168(s0)
  48:src/Riscv.cpp ****                 TCB::timeSliceCounter = 0;
GAS LISTING /tmp/ccK9CJjk.s 			page 18


 464              		.loc 1 48 17 is_stmt 1
 465              	.LBB74:
 466              	.LBB75:
 195:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 467              		.loc 2 195 5
 196:src/../h/Riscv.hpp ****     return sstatus;
 468              		.loc 2 196 5
 196:src/../h/Riscv.hpp ****     return sstatus;
 469              		.loc 2 196 76 is_stmt 0
 470              	 #APP
 471              	# 196 "src/../h/Riscv.hpp" 1
 472              		csrr a5, sstatus
 473              	# 0 "" 2
 474              	 #NO_APP
 475 0214 2338F4F8 		sd	a5,-112(s0)
 197:src/../h/Riscv.hpp **** }
 476              		.loc 2 197 5 is_stmt 1
 197:src/../h/Riscv.hpp **** }
 477              		.loc 2 197 12 is_stmt 0
 478 0218 833704F9 		ld	a5,-112(s0)
 479              	.LBE75:
 480              	.LBE74:
  48:src/Riscv.cpp ****                 TCB::timeSliceCounter = 0;
 481              		.loc 1 48 53
 482 021c 2330F4F6 		sd	a5,-160(s0)
  49:src/Riscv.cpp ****                 TCB::dispatch();
 483              		.loc 1 49 17 is_stmt 1
  49:src/Riscv.cpp ****                 TCB::dispatch();
 484              		.loc 1 49 39 is_stmt 0
 485 0220 97070000 		sd	zero,_ZN3TCB16timeSliceCounterE,a5
 485      23B00700 
  50:src/Riscv.cpp ****                 w_sstatus(sstatus);
 486              		.loc 1 50 17 is_stmt 1
  50:src/Riscv.cpp ****                 w_sstatus(sstatus);
 487              		.loc 1 50 30 is_stmt 0
 488 0228 97000000 		call	_ZN3TCB8dispatchEv
 488      E7800000 
 489              	.LVL21:
  51:src/Riscv.cpp ****                 w_sepc(sepc);
 490              		.loc 1 51 17 is_stmt 1
  51:src/Riscv.cpp ****                 w_sepc(sepc);
 491              		.loc 1 51 26 is_stmt 0
 492 0230 833704F6 		ld	a5,-160(s0)
 493              	.LVL22:
 494              	.LBB76:
 495              	.LBB77:
 202:src/../h/Riscv.hpp **** }
 496              		.loc 2 202 5 is_stmt 1
 202:src/../h/Riscv.hpp **** }
 497              		.loc 2 202 77 is_stmt 0
 498              	 #APP
 499              	# 202 "src/../h/Riscv.hpp" 1
 500              		csrw sstatus, a5
 501              	# 0 "" 2
 502              	.LVL23:
 503              	 #NO_APP
 504              	.LBE77:
GAS LISTING /tmp/ccK9CJjk.s 			page 19


 505              	.LBE76:
  52:src/Riscv.cpp ****             }
 506              		.loc 1 52 17 is_stmt 1
  52:src/Riscv.cpp ****             }
 507              		.loc 1 52 23 is_stmt 0
 508 0238 833784F5 		ld	a5,-168(s0)
 509              	.LVL24:
 510              	.LBB78:
 511              	.LBB79:
 134:src/../h/Riscv.hpp **** }
 512              		.loc 2 134 5 is_stmt 1
 134:src/../h/Riscv.hpp **** }
 513              		.loc 2 134 65 is_stmt 0
 514              	 #APP
 515              	# 134 "src/../h/Riscv.hpp" 1
 135:src/../h/Riscv.hpp **** 
 516              		csrw sepc, a5
 517              	# 0 "" 2
 518              		.loc 2 135 1
 519              	 #NO_APP
 520 0240 6FF05FF9 		j	.L16
 521              	.LVL25:
 522              	.L38:
 523              	.LBE79:
 524              	.LBE78:
 525              	.LBE71:
 526              	.LBE82:
 527              	.LBE83:
 528              	.LBB84:
 529              	.LBB66:
 530              	.LBB61:
  66:src/Riscv.cpp ****                     myConsole::putCInBuff(data);
 531              		.loc 1 66 21 is_stmt 1
  66:src/Riscv.cpp ****                     myConsole::putCInBuff(data);
 532              		.loc 1 66 49 is_stmt 0
 533 0244 9387F7FF 		addi	a5,a5,-1
 534 0248 17070000 		sd	a5,_ZN9myConsole17numberOfCharToGetE,a4
 534      2330F700 
 535              	.LVL26:
  67:src/Riscv.cpp ****                 }
 536              		.loc 1 67 21 is_stmt 1
  67:src/Riscv.cpp ****                 }
 537              		.loc 1 67 42 is_stmt 0
 538 0250 97000000 		call	_ZN9myConsole10putCInBuffEc
 538      E7800000 
 539              	.LVL27:
 540 0258 6FF09FF1 		j	.L17
 541              	.L9:
 542              	.LBE61:
 543              	.LBE66:
 544              	.LBE84:
  80:src/Riscv.cpp ****             //printString("Invalid Read Interrupt\n");
 545              		.loc 1 80 9 is_stmt 1
  80:src/Riscv.cpp ****             //printString("Invalid Read Interrupt\n");
 546              		.loc 1 80 25
  82:src/Riscv.cpp ****             break;
 547              		.loc 1 82 13
GAS LISTING /tmp/ccK9CJjk.s 			page 20


  82:src/Riscv.cpp ****             break;
 548              		.loc 1 82 35 is_stmt 0
 549 025c 97000000 		call	_ZN3TCB17prepareThreadExitEv
 549      E7800000 
 550              	.LVL28:
  83:src/Riscv.cpp ****         }
 551              		.loc 1 83 13 is_stmt 1
 552 0264 6FF09FF7 		j	.L6
 553              	.L8:
  90:src/Riscv.cpp ****         case ecallUsrInt: {
 554              		.loc 1 90 9
  91:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc() + 4;       // - adresa nakon ecall -cuvamo na st
 555              		.loc 1 91 9
  91:src/Riscv.cpp ****             uint64 volatile sepc = Riscv::r_sepc() + 4;       // - adresa nakon ecall -cuvamo na st
 556              		.loc 1 91 27
 557              	.LBB85:
  92:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 558              		.loc 1 92 13
 559              	.LBB86:
 560              	.LBB87:
 127:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 561              		.loc 2 127 5
 128:src/../h/Riscv.hpp ****     return sepc;
 562              		.loc 2 128 5
 128:src/../h/Riscv.hpp ****     return sepc;
 563              		.loc 2 128 64 is_stmt 0
 564              	 #APP
 565              	# 128 "src/../h/Riscv.hpp" 1
 566              		csrr a5, sepc
 567              	# 0 "" 2
 568              	 #NO_APP
 569 026c 233CF4FA 		sd	a5,-72(s0)
 129:src/../h/Riscv.hpp **** }
 570              		.loc 2 129 5 is_stmt 1
 129:src/../h/Riscv.hpp **** }
 571              		.loc 2 129 12 is_stmt 0
 572 0270 833784FB 		ld	a5,-72(s0)
 573              	.LBE87:
 574              	.LBE86:
  92:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 575              		.loc 1 92 52
 576 0274 93874700 		addi	a5,a5,4
  92:src/Riscv.cpp ****             uint64 volatile sstatus = Riscv::r_sstatus();
 577              		.loc 1 92 54
 578 0278 233CF4F6 		sd	a5,-136(s0)
  93:src/Riscv.cpp **** 
 579              		.loc 1 93 13 is_stmt 1
 580              	.LBB88:
 581              	.LBB89:
 195:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 582              		.loc 2 195 5
 196:src/../h/Riscv.hpp ****     return sstatus;
 583              		.loc 2 196 5
 196:src/../h/Riscv.hpp ****     return sstatus;
 584              		.loc 2 196 76 is_stmt 0
 585              	 #APP
 586              	# 196 "src/../h/Riscv.hpp" 1
GAS LISTING /tmp/ccK9CJjk.s 			page 21


 587              		csrr a5, sstatus
 588              	# 0 "" 2
 589              	 #NO_APP
 590 0280 2338F4FA 		sd	a5,-80(s0)
 197:src/../h/Riscv.hpp **** }
 591              		.loc 2 197 5 is_stmt 1
 197:src/../h/Riscv.hpp **** }
 592              		.loc 2 197 12 is_stmt 0
 593 0284 833704FB 		ld	a5,-80(s0)
 594              	.LBE89:
 595              	.LBE88:
  93:src/Riscv.cpp **** 
 596              		.loc 1 93 56
 597 0288 2330F4F8 		sd	a5,-128(s0)
  95:src/Riscv.cpp ****                 case MemoryAllocator::MEM_ALLOC_CODE: {
 598              		.loc 1 95 13 is_stmt 1
 599              	.LBB90:
  95:src/Riscv.cpp ****                 case MemoryAllocator::MEM_ALLOC_CODE: {
 600              		.loc 1 95 21 is_stmt 0
 601 028c 833784FC 		ld	a5,-56(s0)
 602 0290 13072004 		li	a4,66
 603 0294 6364F702 		bgtu	a5,a4,.L18
 604 0298 638A0704 		beqz	a5,.L19
 605 029c 6368F704 		bgtu	a5,a4,.L19
 606 02a0 93972700 		slli	a5,a5,2
 607 02a4 17070000 		lla	a4,.L21
 607      13070700 
 608 02ac B387E700 		add	a5,a5,a4
 609 02b0 83A70700 		lw	a5,0(a5)
 610 02b4 B387E700 		add	a5,a5,a4
 611 02b8 67800700 		jr	a5
 612              		.section	.rodata
 613              		.align	2
 614              		.align	2
 615              	.L21:
 616 0000 00000000 		.word	.L19-.L21
 617 0004 00000000 		.word	.L34-.L21
 618 0008 00000000 		.word	.L33-.L21
 619 000c 00000000 		.word	.L19-.L21
 620 0010 00000000 		.word	.L19-.L21
 621 0014 00000000 		.word	.L19-.L21
 622 0018 00000000 		.word	.L19-.L21
 623 001c 00000000 		.word	.L19-.L21
 624 0020 00000000 		.word	.L19-.L21
 625 0024 00000000 		.word	.L19-.L21
 626 0028 00000000 		.word	.L19-.L21
 627 002c 00000000 		.word	.L19-.L21
 628 0030 00000000 		.word	.L19-.L21
 629 0034 00000000 		.word	.L19-.L21
 630 0038 00000000 		.word	.L19-.L21
 631 003c 00000000 		.word	.L19-.L21
 632 0040 00000000 		.word	.L19-.L21
 633 0044 00000000 		.word	.L32-.L21
 634 0048 00000000 		.word	.L31-.L21
 635 004c 00000000 		.word	.L30-.L21
 636 0050 00000000 		.word	.L19-.L21
 637 0054 00000000 		.word	.L19-.L21
GAS LISTING /tmp/ccK9CJjk.s 			page 22


 638 0058 00000000 		.word	.L19-.L21
 639 005c 00000000 		.word	.L19-.L21
 640 0060 00000000 		.word	.L19-.L21
 641 0064 00000000 		.word	.L19-.L21
 642 0068 00000000 		.word	.L19-.L21
 643 006c 00000000 		.word	.L19-.L21
 644 0070 00000000 		.word	.L19-.L21
 645 0074 00000000 		.word	.L19-.L21
 646 0078 00000000 		.word	.L19-.L21
 647 007c 00000000 		.word	.L19-.L21
 648 0080 00000000 		.word	.L19-.L21
 649 0084 00000000 		.word	.L29-.L21
 650 0088 00000000 		.word	.L28-.L21
 651 008c 00000000 		.word	.L27-.L21
 652 0090 00000000 		.word	.L26-.L21
 653 0094 00000000 		.word	.L25-.L21
 654 0098 00000000 		.word	.L24-.L21
 655 009c 00000000 		.word	.L19-.L21
 656 00a0 00000000 		.word	.L19-.L21
 657 00a4 00000000 		.word	.L19-.L21
 658 00a8 00000000 		.word	.L19-.L21
 659 00ac 00000000 		.word	.L19-.L21
 660 00b0 00000000 		.word	.L19-.L21
 661 00b4 00000000 		.word	.L19-.L21
 662 00b8 00000000 		.word	.L19-.L21
 663 00bc 00000000 		.word	.L19-.L21
 664 00c0 00000000 		.word	.L19-.L21
 665 00c4 00000000 		.word	.L23-.L21
 666 00c8 00000000 		.word	.L19-.L21
 667 00cc 00000000 		.word	.L19-.L21
 668 00d0 00000000 		.word	.L19-.L21
 669 00d4 00000000 		.word	.L19-.L21
 670 00d8 00000000 		.word	.L19-.L21
 671 00dc 00000000 		.word	.L19-.L21
 672 00e0 00000000 		.word	.L19-.L21
 673 00e4 00000000 		.word	.L19-.L21
 674 00e8 00000000 		.word	.L19-.L21
 675 00ec 00000000 		.word	.L19-.L21
 676 00f0 00000000 		.word	.L19-.L21
 677 00f4 00000000 		.word	.L19-.L21
 678 00f8 00000000 		.word	.L19-.L21
 679 00fc 00000000 		.word	.L19-.L21
 680 0100 00000000 		.word	.L19-.L21
 681 0104 00000000 		.word	.L22-.L21
 682 0108 00000000 		.word	.L20-.L21
 683              		.text
 684              	.L18:
 685 02bc 13070010 		li	a4,256
 686 02c0 6396E702 		bne	a5,a4,.L19
 687              	.LBB91:
 152:src/Riscv.cpp ****                     char res = myConsole::getCOutBuff();
 688              		.loc 1 152 17 is_stmt 1
 152:src/Riscv.cpp ****                     char res = myConsole::getCOutBuff();
 689              		.loc 1 152 54
 690              	.LBB92:
 153:src/Riscv.cpp ****                     __asm__ volatile("mv a0, %0" : :"r"((uint64)res));
 691              		.loc 1 153 21
GAS LISTING /tmp/ccK9CJjk.s 			page 23


 153:src/Riscv.cpp ****                     __asm__ volatile("mv a0, %0" : :"r"((uint64)res));
 692              		.loc 1 153 54 is_stmt 0
 693 02c4 97000000 		call	_ZN9myConsole11getCOutBuffEv
 693      E7800000 
 694              	.LVL29:
 153:src/Riscv.cpp ****                     __asm__ volatile("mv a0, %0" : :"r"((uint64)res));
 695              		.loc 1 153 55
 696 02cc 9377F50F 		andi	a5,a0,0xff
 697              	.LVL30:
 154:src/Riscv.cpp ****                     //save a0 on old context stack
 698              		.loc 1 154 21 is_stmt 1
 154:src/Riscv.cpp ****                     //save a0 on old context stack
 699              		.loc 1 154 70 is_stmt 0
 700              	 #APP
 701              	# 154 "src/Riscv.cpp" 1
 156:src/Riscv.cpp ****                     break;
 702              		mv a0, a5
 703              	# 0 "" 2
 704              		.loc 1 156 21 is_stmt 1
 156:src/Riscv.cpp ****                     break;
 705              		.loc 1 156 40 is_stmt 0
 706              	 #NO_APP
 707 02d4 97000000 		call	_ZN5Riscv12setA0onStackEv
 707      E7800000 
 708              	.LVL31:
 157:src/Riscv.cpp ****                 }
 709              		.loc 1 157 21 is_stmt 1
 710 02dc 6F000001 		j	.L19
 711              	.L34:
 712              	.LBE92:
  96:src/Riscv.cpp ****                     MemoryAllocator::prepareMemAlloc(arg1);
 713              		.loc 1 96 17
  96:src/Riscv.cpp ****                     MemoryAllocator::prepareMemAlloc(arg1);
 714              		.loc 1 96 55
  97:src/Riscv.cpp ****                     break;
 715              		.loc 1 97 21
  97:src/Riscv.cpp ****                     break;
 716              		.loc 1 97 53 is_stmt 0
 717 02e0 033584FE 		ld	a0,-24(s0)
 718 02e4 97000000 		call	_ZN15MemoryAllocator15prepareMemAllocEm
 718      E7800000 
 719              	.LVL32:
  98:src/Riscv.cpp ****                 }
 720              		.loc 1 98 21 is_stmt 1
 721              	.L19:
 722              	.LBE91:
 723              	.LBE90:
 160:src/Riscv.cpp ****             w_sepc(sepc);
 724              		.loc 1 160 13
 160:src/Riscv.cpp ****             w_sepc(sepc);
 725              		.loc 1 160 22 is_stmt 0
 726 02ec 833704F8 		ld	a5,-128(s0)
 727              	.LVL33:
 728              	.LBB94:
 729              	.LBB95:
 202:src/../h/Riscv.hpp **** }
 730              		.loc 2 202 5 is_stmt 1
GAS LISTING /tmp/ccK9CJjk.s 			page 24


 202:src/../h/Riscv.hpp **** }
 731              		.loc 2 202 77 is_stmt 0
 732              	 #APP
 733              	# 202 "src/../h/Riscv.hpp" 1
 734              		csrw sstatus, a5
 735              	# 0 "" 2
 736              	.LVL34:
 737              	 #NO_APP
 738              	.LBE95:
 739              	.LBE94:
 161:src/Riscv.cpp ****             break;
 740              		.loc 1 161 13 is_stmt 1
 161:src/Riscv.cpp ****             break;
 741              		.loc 1 161 19 is_stmt 0
 742 02f4 833784F7 		ld	a5,-136(s0)
 743              	.LVL35:
 744              	.LBB96:
 745              	.LBB97:
 134:src/../h/Riscv.hpp **** }
 746              		.loc 2 134 5 is_stmt 1
 134:src/../h/Riscv.hpp **** }
 747              		.loc 2 134 65 is_stmt 0
 748              	 #APP
 749              	# 134 "src/../h/Riscv.hpp" 1
 750              		csrw sepc, a5
 751              	# 0 "" 2
 752              	.LVL36:
 753              	 #NO_APP
 754              	.LBE97:
 755              	.LBE96:
 756              	.LBE85:
 757              	.LBE102:
 758              	.LBE104:
 165:src/Riscv.cpp **** 
 759              		.loc 1 165 1
 760 02fc 6FF01FEE 		j	.L6
 761              	.L33:
 762              	.LBB105:
 763              	.LBB103:
 764              	.LBB99:
 765              	.LBB98:
 766              	.LBB93:
 100:src/Riscv.cpp ****                     MemoryAllocator::prepareMemFree(arg1);
 767              		.loc 1 100 17 is_stmt 1
 100:src/Riscv.cpp ****                     MemoryAllocator::prepareMemFree(arg1);
 768              		.loc 1 100 54
 101:src/Riscv.cpp ****                     break;
 769              		.loc 1 101 21
 101:src/Riscv.cpp ****                     break;
 770              		.loc 1 101 52 is_stmt 0
 771 0300 033584FE 		ld	a0,-24(s0)
 772 0304 97000000 		call	_ZN15MemoryAllocator14prepareMemFreeEm
 772      E7800000 
 773              	.LVL37:
 102:src/Riscv.cpp ****                 }
 774              		.loc 1 102 21 is_stmt 1
 775 030c 6FF01FFE 		j	.L19
GAS LISTING /tmp/ccK9CJjk.s 			page 25


 776              	.L32:
 104:src/Riscv.cpp ****                     TCB::prepareThreadCreate((thread_t*) arg1, (TCB::Body) arg2, (void*) arg3, (voi
 777              		.loc 1 104 17
 104:src/Riscv.cpp ****                     TCB::prepareThreadCreate((thread_t*) arg1, (TCB::Body) arg2, (void*) arg3, (voi
 778              		.loc 1 104 42
 105:src/Riscv.cpp ****                     break;
 779              		.loc 1 105 21
 105:src/Riscv.cpp ****                     break;
 780              		.loc 1 105 45 is_stmt 0
 781 0310 033584FE 		ld	a0,-24(s0)
 782 0314 833504FE 		ld	a1,-32(s0)
 783 0318 033684FD 		ld	a2,-40(s0)
 784 031c 833604FD 		ld	a3,-48(s0)
 785 0320 97000000 		call	_ZN3TCB19prepareThreadCreateEPPS_PFvPvES2_S2_
 785      E7800000 
 786              	.LVL38:
 106:src/Riscv.cpp ****                 }
 787              		.loc 1 106 21 is_stmt 1
 788 0328 6FF05FFC 		j	.L19
 789              	.L31:
 108:src/Riscv.cpp ****                     TCB::prepareThreadExit();
 790              		.loc 1 108 17
 108:src/Riscv.cpp ****                     TCB::prepareThreadExit();
 791              		.loc 1 108 40
 109:src/Riscv.cpp ****                     break;
 792              		.loc 1 109 21
 109:src/Riscv.cpp ****                     break;
 793              		.loc 1 109 43 is_stmt 0
 794 032c 97000000 		call	_ZN3TCB17prepareThreadExitEv
 794      E7800000 
 795              	.LVL39:
 110:src/Riscv.cpp ****                 }
 796              		.loc 1 110 21 is_stmt 1
 797 0334 6FF09FFB 		j	.L19
 798              	.L30:
 112:src/Riscv.cpp ****                     TCB::dispatch();
 799              		.loc 1 112 17
 112:src/Riscv.cpp ****                     TCB::dispatch();
 800              		.loc 1 112 44
 113:src/Riscv.cpp ****                     break;
 801              		.loc 1 113 21
 113:src/Riscv.cpp ****                     break;
 802              		.loc 1 113 34 is_stmt 0
 803 0338 97000000 		call	_ZN3TCB8dispatchEv
 803      E7800000 
 804              	.LVL40:
 114:src/Riscv.cpp ****                 }
 805              		.loc 1 114 21 is_stmt 1
 806 0340 6FF0DFFA 		j	.L19
 807              	.L29:
 116:src/Riscv.cpp ****                     mySemaphore::prepareSemOpen((sem_t*) arg1, (unsigned) arg2);
 808              		.loc 1 116 17
 116:src/Riscv.cpp ****                     mySemaphore::prepareSemOpen((sem_t*) arg1, (unsigned) arg2);
 809              		.loc 1 116 45
 117:src/Riscv.cpp ****                     break;
 810              		.loc 1 117 21
 117:src/Riscv.cpp ****                     break;
GAS LISTING /tmp/ccK9CJjk.s 			page 26


 811              		.loc 1 117 48 is_stmt 0
 812 0344 033584FE 		ld	a0,-24(s0)
 813 0348 833504FE 		ld	a1,-32(s0)
 814 034c 9B850500 		sext.w	a1,a1
 815 0350 97000000 		call	_ZN11mySemaphore14prepareSemOpenEPPS_j
 815      E7800000 
 816              	.LVL41:
 118:src/Riscv.cpp ****                 }
 817              		.loc 1 118 21 is_stmt 1
 818 0358 6FF05FF9 		j	.L19
 819              	.L28:
 120:src/Riscv.cpp ****                     mySemaphore::prepareSemClose((sem_t) arg1);
 820              		.loc 1 120 17
 120:src/Riscv.cpp ****                     mySemaphore::prepareSemClose((sem_t) arg1);
 821              		.loc 1 120 46
 121:src/Riscv.cpp ****                     break;
 822              		.loc 1 121 21
 121:src/Riscv.cpp ****                     break;
 823              		.loc 1 121 49 is_stmt 0
 824 035c 033584FE 		ld	a0,-24(s0)
 825 0360 97000000 		call	_ZN11mySemaphore15prepareSemCloseEPS_
 825      E7800000 
 826              	.LVL42:
 122:src/Riscv.cpp ****                 }
 827              		.loc 1 122 21 is_stmt 1
 828 0368 6FF05FF8 		j	.L19
 829              	.L27:
 124:src/Riscv.cpp ****                     mySemaphore::prepareSemWait((sem_t) arg1);
 830              		.loc 1 124 17
 124:src/Riscv.cpp ****                     mySemaphore::prepareSemWait((sem_t) arg1);
 831              		.loc 1 124 45
 125:src/Riscv.cpp ****                     break;
 832              		.loc 1 125 21
 125:src/Riscv.cpp ****                     break;
 833              		.loc 1 125 48 is_stmt 0
 834 036c 033584FE 		ld	a0,-24(s0)
 835 0370 97000000 		call	_ZN11mySemaphore14prepareSemWaitEPS_
 835      E7800000 
 836              	.LVL43:
 126:src/Riscv.cpp ****                 }
 837              		.loc 1 126 21 is_stmt 1
 838 0378 6FF05FF7 		j	.L19
 839              	.L26:
 128:src/Riscv.cpp ****                     mySemaphore::prepareSemSignal((sem_t) arg1);
 840              		.loc 1 128 17
 128:src/Riscv.cpp ****                     mySemaphore::prepareSemSignal((sem_t) arg1);
 841              		.loc 1 128 47
 129:src/Riscv.cpp ****                     break;
 842              		.loc 1 129 21
 129:src/Riscv.cpp ****                     break;
 843              		.loc 1 129 50 is_stmt 0
 844 037c 033584FE 		ld	a0,-24(s0)
 845 0380 97000000 		call	_ZN11mySemaphore16prepareSemSignalEPS_
 845      E7800000 
 846              	.LVL44:
 130:src/Riscv.cpp ****                 }
 847              		.loc 1 130 21 is_stmt 1
GAS LISTING /tmp/ccK9CJjk.s 			page 27


 848 0388 6FF05FF6 		j	.L19
 849              	.L25:
 132:src/Riscv.cpp ****                     mySemaphore::prepareSemTimedWait((sem_t) arg1, (time_t) arg2);
 850              		.loc 1 132 17
 132:src/Riscv.cpp ****                     mySemaphore::prepareSemTimedWait((sem_t) arg1, (time_t) arg2);
 851              		.loc 1 132 51
 133:src/Riscv.cpp ****                     break;
 852              		.loc 1 133 21
 133:src/Riscv.cpp ****                     break;
 853              		.loc 1 133 53 is_stmt 0
 854 038c 033584FE 		ld	a0,-24(s0)
 855 0390 833504FE 		ld	a1,-32(s0)
 856 0394 97000000 		call	_ZN11mySemaphore19prepareSemTimedWaitEPS_m
 856      E7800000 
 857              	.LVL45:
 134:src/Riscv.cpp ****                 }
 858              		.loc 1 134 21 is_stmt 1
 859 039c 6FF01FF5 		j	.L19
 860              	.L24:
 136:src/Riscv.cpp ****                     mySemaphore::prepareSemTryWait((sem_t) arg1);
 861              		.loc 1 136 17
 136:src/Riscv.cpp ****                     mySemaphore::prepareSemTryWait((sem_t) arg1);
 862              		.loc 1 136 49
 137:src/Riscv.cpp ****                     break;
 863              		.loc 1 137 21
 137:src/Riscv.cpp ****                     break;
 864              		.loc 1 137 51 is_stmt 0
 865 03a0 033584FE 		ld	a0,-24(s0)
 866 03a4 97000000 		call	_ZN11mySemaphore17prepareSemTryWaitEPS_
 866      E7800000 
 867              	.LVL46:
 138:src/Riscv.cpp ****                 }
 868              		.loc 1 138 21 is_stmt 1
 869 03ac 6FF01FF4 		j	.L19
 870              	.L23:
 140:src/Riscv.cpp ****                     TCB::prepareTimeSleep((time_t) arg1);
 871              		.loc 1 140 17
 140:src/Riscv.cpp ****                     TCB::prepareTimeSleep((time_t) arg1);
 872              		.loc 1 140 46
 141:src/Riscv.cpp ****                     break;
 873              		.loc 1 141 21
 141:src/Riscv.cpp ****                     break;
 874              		.loc 1 141 42 is_stmt 0
 875 03b0 033584FE 		ld	a0,-24(s0)
 876 03b4 97000000 		call	_ZN3TCB16prepareTimeSleepEm
 876      E7800000 
 877              	.LVL47:
 142:src/Riscv.cpp ****                 }
 878              		.loc 1 142 21 is_stmt 1
 879 03bc 6FF01FF3 		j	.L19
 880              	.L22:
 144:src/Riscv.cpp ****                     myConsole::prepareGetC();
 881              		.loc 1 144 17
 144:src/Riscv.cpp ****                     myConsole::prepareGetC();
 882              		.loc 1 144 47
 145:src/Riscv.cpp ****                     break;
 883              		.loc 1 145 21
GAS LISTING /tmp/ccK9CJjk.s 			page 28


 145:src/Riscv.cpp ****                     break;
 884              		.loc 1 145 43 is_stmt 0
 885 03c0 97000000 		call	_ZN9myConsole11prepareGetCEv
 885      E7800000 
 886              	.LVL48:
 146:src/Riscv.cpp ****                 }
 887              		.loc 1 146 21 is_stmt 1
 888 03c8 6FF05FF2 		j	.L19
 889              	.L20:
 148:src/Riscv.cpp ****                     myConsole::preparePutC((char) arg1);
 890              		.loc 1 148 17
 148:src/Riscv.cpp ****                     myConsole::preparePutC((char) arg1);
 891              		.loc 1 148 47
 149:src/Riscv.cpp ****                     break;
 892              		.loc 1 149 21
 149:src/Riscv.cpp ****                     break;
 893              		.loc 1 149 43 is_stmt 0
 894 03cc 033584FE 		ld	a0,-24(s0)
 895 03d0 1375F50F 		andi	a0,a0,0xff
 896 03d4 97000000 		call	_ZN9myConsole11preparePutCEc
 896      E7800000 
 897              	.LVL49:
 150:src/Riscv.cpp ****                 }
 898              		.loc 1 150 21 is_stmt 1
 899 03dc 6FF01FF1 		j	.L19
 900              	.LBE93:
 901              	.LBE98:
 902              	.LBE99:
 903              	.LBE103:
 904              	.LBE105:
 905              		.cfi_endproc
 906              	.LFE33:
 908              		.align	2
 909              		.globl	_ZN5Riscv14changePrivModeEv
 911              	_ZN5Riscv14changePrivModeEv:
 912              	.LFB35:
 175:src/Riscv.cpp **** 
 176:src/Riscv.cpp **** 
 177:src/Riscv.cpp **** void Riscv::changePrivMode() {
 913              		.loc 1 177 30
 914              		.cfi_startproc
 915 03e0 130101FF 		addi	sp,sp,-16
 916              		.cfi_def_cfa_offset 16
 917 03e4 23348100 		sd	s0,8(sp)
 918              		.cfi_offset 8, -8
 919 03e8 13040101 		addi	s0,sp,16
 920              		.cfi_def_cfa 8, 0
 178:src/Riscv.cpp ****     if (TCB::userMode) {
 921              		.loc 1 178 5
 922 03ec 97070000 		lbu	a5,_ZN3TCB8userModeE
 922      83C70700 
 923 03f4 63860700 		beqz	a5,.L41
 179:src/Riscv.cpp ****         mc_sstatus(SSTATUS_SPP);
 924              		.loc 1 179 9
 925              	.LVL50:
 926              	.LBB106:
 927              	.LBB107:
GAS LISTING /tmp/ccK9CJjk.s 			page 29


 190:src/../h/Riscv.hpp **** }
 928              		.loc 2 190 5
 190:src/../h/Riscv.hpp **** }
 929              		.loc 2 190 68 is_stmt 0
 930 03f8 93070010 		li	a5,256
 931              	 #APP
 932              	# 190 "src/../h/Riscv.hpp" 1
 933              		csrc sstatus, a5
 934              	# 0 "" 2
 935              	.LVL51:
 936              	 #NO_APP
 937              	.L41:
 938              	.LBE107:
 939              	.LBE106:
 180:src/Riscv.cpp ****     }
 181:src/Riscv.cpp **** }
 940              		.loc 1 181 1
 941 0400 03348100 		ld	s0,8(sp)
 942              		.cfi_restore 8
 943              		.cfi_def_cfa 2, 16
 944 0404 13010101 		addi	sp,sp,16
 945              		.cfi_def_cfa_offset 0
 946 0408 67800000 		jr	ra
 947              		.cfi_endproc
 948              	.LFE35:
 950              		.globl	_ZN5Riscv6brojacE
 951              		.section	.sbss,"aw",@nobits
 952              		.align	2
 955              	_ZN5Riscv6brojacE:
 956 0000 00000000 		.zero	4
 957              		.text
 958              	.Letext0:
 959              		.file 4 "src/../h/../lib/hw.h"
 960              		.file 5 "src/../h/../h/MemoryAllocator.hpp"
 961              		.file 6 "src/../h/../h/list.hpp"
 962              		.file 7 "src/../h/SleepingQueue.hpp"
 963              		.file 8 "src/../h/../h/syscall_c.hpp"
 964              		.file 9 "src/../h/../h/Semaphore.hpp"
 965              		.file 10 "src/../h/Console.hpp"
GAS LISTING /tmp/ccK9CJjk.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccK9CJjk.s:12     .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccK9CJjk.s:16     .text:0000000000000000 .L0 
     /tmp/ccK9CJjk.s:17     .text:0000000000000000 .L0 
     /tmp/ccK9CJjk.s:18     .text:0000000000000004 .L0 
     /tmp/ccK9CJjk.s:20     .text:0000000000000008 .L0 
     /tmp/ccK9CJjk.s:22     .text:000000000000000c .L0 
     /tmp/ccK9CJjk.s:24     .text:000000000000000c .L0 
     /tmp/ccK9CJjk.s:31     .text:0000000000000018 .L0 
     /tmp/ccK9CJjk.s:32     .text:0000000000000018 .L0 
     /tmp/ccK9CJjk.s:33     .text:0000000000000018 .L0 
     /tmp/ccK9CJjk.s:44     .text:0000000000000020 .L0 
       src/Riscv.cpp:18     .text:0000000000000020 .L0 
     /tmp/ccK9CJjk.s:50     .text:0000000000000024 .L0 
       src/Riscv.cpp:19     .text:0000000000000024 .L0 
     /tmp/ccK9CJjk.s:56     .text:0000000000000028 .L0 
     /tmp/ccK9CJjk.s:57     .text:000000000000002c .L0 
     /tmp/ccK9CJjk.s:58     .text:000000000000002c .L0 
     /tmp/ccK9CJjk.s:60     .text:0000000000000030 .L0 
     /tmp/ccK9CJjk.s:62     .text:0000000000000034 .L0 
     /tmp/ccK9CJjk.s:68     .text:0000000000000034 _ZN5Riscv12setA0onStackEv
     /tmp/ccK9CJjk.s:71     .text:0000000000000034 .L0 
     /tmp/ccK9CJjk.s:72     .text:0000000000000034 .L0 
     /tmp/ccK9CJjk.s:73     .text:0000000000000038 .L0 
     /tmp/ccK9CJjk.s:75     .text:000000000000003c .L0 
     /tmp/ccK9CJjk.s:77     .text:0000000000000040 .L0 
     /tmp/ccK9CJjk.s:79     .text:0000000000000040 .L0 
     /tmp/ccK9CJjk.s:80     .text:0000000000000040 .L0 
       src/Riscv.cpp:170    .text:0000000000000040 .L0 
     /tmp/ccK9CJjk.s:87     .text:0000000000000044 .L0 
     /tmp/ccK9CJjk.s:89     .text:0000000000000044 .L0 
       src/Riscv.cpp:171    .text:0000000000000050 .L0 
     /tmp/ccK9CJjk.s:97     .text:0000000000000054 .L0 
       src/Riscv.cpp:172    .text:0000000000000054 .L0 
     /tmp/ccK9CJjk.s:102    .text:0000000000000058 .L0 
       src/Riscv.cpp:173    .text:0000000000000058 .L0 
     /tmp/ccK9CJjk.s:108    .text:000000000000005c .L0 
     /tmp/ccK9CJjk.s:109    .text:0000000000000060 .L0 
     /tmp/ccK9CJjk.s:110    .text:0000000000000060 .L0 
     /tmp/ccK9CJjk.s:112    .text:0000000000000064 .L0 
     /tmp/ccK9CJjk.s:114    .text:0000000000000068 .L0 
     /tmp/ccK9CJjk.s:120    .text:0000000000000068 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccK9CJjk.s:123    .text:0000000000000068 .L0 
     /tmp/ccK9CJjk.s:124    .text:0000000000000068 .L0 
     /tmp/ccK9CJjk.s:125    .text:000000000000006c .L0 
     /tmp/ccK9CJjk.s:128    .text:0000000000000074 .L0 
     /tmp/ccK9CJjk.s:129    .text:0000000000000074 .L0 
     /tmp/ccK9CJjk.s:131    .text:0000000000000078 .L0 
     /tmp/ccK9CJjk.s:133    .text:0000000000000078 .L0 
     /tmp/ccK9CJjk.s:134    .text:0000000000000078 .L0 
       src/Riscv.cpp:26     .text:0000000000000078 .L0 
     /tmp/ccK9CJjk.s:142    .text:0000000000000080 .L0 
       src/Riscv.cpp:27     .text:0000000000000080 .L0 
     /tmp/ccK9CJjk.s:150    .text:0000000000000088 .L0 
       src/Riscv.cpp:28     .text:0000000000000088 .L0 
     /tmp/ccK9CJjk.s:158    .text:0000000000000090 .L0 
GAS LISTING /tmp/ccK9CJjk.s 			page 31


       src/Riscv.cpp:29     .text:0000000000000090 .L0 
     /tmp/ccK9CJjk.s:166    .text:0000000000000098 .L0 
     /tmp/ccK9CJjk.s:167    .text:0000000000000098 .L0 
       src/Riscv.cpp:31     .text:0000000000000098 .L0 
     /tmp/ccK9CJjk.s:175    .text:00000000000000a0 .L0 
       src/Riscv.cpp:33     .text:00000000000000a0 .L0 
     /tmp/ccK9CJjk.s:186    .text:00000000000000b0 .L0 
     /tmp/ccK9CJjk.s:187    .text:00000000000000b0 .L0 
     /tmp/ccK9CJjk.s:188    .text:00000000000000b0 .L0 
  src/../h/Riscv.hpp:116    .text:00000000000000b0 .L0 
     /tmp/ccK9CJjk.s:196    .text:00000000000000b8 .L0 
     /tmp/ccK9CJjk.s:197    .text:00000000000000b8 .L0 
     /tmp/ccK9CJjk.s:201    .text:00000000000000bc .L0 
     /tmp/ccK9CJjk.s:204    .text:00000000000000c0 .L0 
     /tmp/ccK9CJjk.s:205    .text:00000000000000c0 .L0 
     /tmp/ccK9CJjk.s:207    .text:00000000000000c4 .L0 
     /tmp/ccK9CJjk.s:217    .text:00000000000000e4 .L0 
     /tmp/ccK9CJjk.s:218    .text:00000000000000e4 .L0 
     /tmp/ccK9CJjk.s:219    .text:00000000000000e4 .L0 
     /tmp/ccK9CJjk.s:220    .text:00000000000000e4 .L0 
     /tmp/ccK9CJjk.s:223    .text:00000000000000ec .L0 
     /tmp/ccK9CJjk.s:227    .text:00000000000000f0 .L0 
     /tmp/ccK9CJjk.s:231    .text:00000000000000f8 .L0 
     /tmp/ccK9CJjk.s:232    .text:00000000000000f8 .L0 
     /tmp/ccK9CJjk.s:233    .text:00000000000000f8 .L0 
     /tmp/ccK9CJjk.s:234    .text:00000000000000f8 .L0 
     /tmp/ccK9CJjk.s:237    .text:0000000000000100 .L0 
     /tmp/ccK9CJjk.s:241    .text:0000000000000104 .L0 
     /tmp/ccK9CJjk.s:251    .text:0000000000000124 .L0 
     /tmp/ccK9CJjk.s:253    .text:0000000000000124 .L0 
     /tmp/ccK9CJjk.s:256    .text:0000000000000124 .L0 
     /tmp/ccK9CJjk.s:257    .text:0000000000000124 .L0 
     /tmp/ccK9CJjk.s:258    .text:0000000000000124 .L0 
  src/../h/Riscv.hpp:128    .text:0000000000000124 .L0 
     /tmp/ccK9CJjk.s:266    .text:000000000000012c .L0 
     /tmp/ccK9CJjk.s:267    .text:000000000000012c .L0 
     /tmp/ccK9CJjk.s:271    .text:0000000000000130 .L0 
     /tmp/ccK9CJjk.s:275    .text:0000000000000134 .L0 
     /tmp/ccK9CJjk.s:276    .text:0000000000000134 .L0 
     /tmp/ccK9CJjk.s:277    .text:0000000000000134 .L0 
  src/../h/Riscv.hpp:196    .text:0000000000000134 .L0 
     /tmp/ccK9CJjk.s:285    .text:000000000000013c .L0 
     /tmp/ccK9CJjk.s:286    .text:000000000000013c .L0 
     /tmp/ccK9CJjk.s:290    .text:0000000000000140 .L0 
     /tmp/ccK9CJjk.s:292    .text:0000000000000144 .L0 
     /tmp/ccK9CJjk.s:293    .text:0000000000000144 .L0 
     /tmp/ccK9CJjk.s:295    .text:000000000000014c .L0 
     /tmp/ccK9CJjk.s:299    .text:0000000000000150 .L0 
     /tmp/ccK9CJjk.s:304    .text:0000000000000158 .L0 
     /tmp/ccK9CJjk.s:305    .text:0000000000000158 .L0 
     /tmp/ccK9CJjk.s:307    .text:0000000000000160 .L0 
     /tmp/ccK9CJjk.s:310    .text:0000000000000164 .L0 
     /tmp/ccK9CJjk.s:311    .text:0000000000000164 .L0 
     /tmp/ccK9CJjk.s:313    .text:000000000000016c .L0 
     /tmp/ccK9CJjk.s:319    .text:0000000000000170 .L0 
     /tmp/ccK9CJjk.s:320    .text:0000000000000170 .L0 
     /tmp/ccK9CJjk.s:325    .text:0000000000000180 .L0 
GAS LISTING /tmp/ccK9CJjk.s 			page 32


     /tmp/ccK9CJjk.s:326    .text:0000000000000180 .L0 
     /tmp/ccK9CJjk.s:331    .text:0000000000000184 .L0 
  src/../h/Riscv.hpp:202    .text:0000000000000184 .L0 
     /tmp/ccK9CJjk.s:341    .text:0000000000000188 .L0 
     /tmp/ccK9CJjk.s:342    .text:0000000000000188 .L0 
     /tmp/ccK9CJjk.s:347    .text:000000000000018c .L0 
  src/../h/Riscv.hpp:134    .text:000000000000018c .L0 
     /tmp/ccK9CJjk.s:354    .text:0000000000000190 .L0 
     /tmp/ccK9CJjk.s:361    .text:0000000000000194 .L0 
     /tmp/ccK9CJjk.s:363    .text:0000000000000194 .L0 
     /tmp/ccK9CJjk.s:364    .text:0000000000000194 .L0 
     /tmp/ccK9CJjk.s:955    .sbss:0000000000000000 _ZN5Riscv6brojacE
     /tmp/ccK9CJjk.s:365    .text:0000000000000194 .L0 
     /tmp/ccK9CJjk.s:370    .text:00000000000001a8 .L0 
     /tmp/ccK9CJjk.s:371    .text:00000000000001a8 .L0 
     /tmp/ccK9CJjk.s:373    .text:00000000000001ac .L0 
     /tmp/ccK9CJjk.s:376    .text:00000000000001b0 .L0 
     /tmp/ccK9CJjk.s:377    .text:00000000000001b0 .L0 
     /tmp/ccK9CJjk.s:383    .text:00000000000001c4 .L0 
     /tmp/ccK9CJjk.s:384    .text:00000000000001c4 .L0 
     /tmp/ccK9CJjk.s:390    .text:00000000000001cc .L0 
     /tmp/ccK9CJjk.s:391    .text:00000000000001cc .L0 
     /tmp/ccK9CJjk.s:396    .text:00000000000001d0 .L0 
     /tmp/ccK9CJjk.s:403    .text:00000000000001d4 .L0 
     /tmp/ccK9CJjk.s:404    .text:00000000000001d4 .L0 
     /tmp/ccK9CJjk.s:405    .text:00000000000001d4 .L0 
     /tmp/ccK9CJjk.s:419    .text:00000000000001dc .L0 
     /tmp/ccK9CJjk.s:420    .text:00000000000001e0 .L0 
     /tmp/ccK9CJjk.s:421    .text:00000000000001e0 .L0 
     /tmp/ccK9CJjk.s:423    .text:00000000000001e4 .L0 
     /tmp/ccK9CJjk.s:424    .text:00000000000001e4 .L0 
     /tmp/ccK9CJjk.s:426    .text:00000000000001e8 .L0 
     /tmp/ccK9CJjk.s:429    .text:00000000000001ec .L0 
     /tmp/ccK9CJjk.s:434    .text:00000000000001ec .L0 
     /tmp/ccK9CJjk.s:435    .text:00000000000001ec .L0 
     /tmp/ccK9CJjk.s:438    .text:00000000000001f4 .L0 
     /tmp/ccK9CJjk.s:439    .text:00000000000001f4 .L0 
     /tmp/ccK9CJjk.s:448    .text:0000000000000200 .L0 
     /tmp/ccK9CJjk.s:449    .text:0000000000000200 .L0 
     /tmp/ccK9CJjk.s:450    .text:0000000000000200 .L0 
  src/../h/Riscv.hpp:128    .text:0000000000000200 .L0 
     /tmp/ccK9CJjk.s:458    .text:0000000000000208 .L0 
     /tmp/ccK9CJjk.s:459    .text:0000000000000208 .L0 
     /tmp/ccK9CJjk.s:463    .text:000000000000020c .L0 
     /tmp/ccK9CJjk.s:467    .text:0000000000000210 .L0 
     /tmp/ccK9CJjk.s:468    .text:0000000000000210 .L0 
     /tmp/ccK9CJjk.s:469    .text:0000000000000210 .L0 
  src/../h/Riscv.hpp:196    .text:0000000000000210 .L0 
     /tmp/ccK9CJjk.s:477    .text:0000000000000218 .L0 
     /tmp/ccK9CJjk.s:478    .text:0000000000000218 .L0 
     /tmp/ccK9CJjk.s:482    .text:000000000000021c .L0 
     /tmp/ccK9CJjk.s:484    .text:0000000000000220 .L0 
     /tmp/ccK9CJjk.s:485    .text:0000000000000220 .L0 
     /tmp/ccK9CJjk.s:487    .text:0000000000000228 .L0 
     /tmp/ccK9CJjk.s:488    .text:0000000000000228 .L0 
     /tmp/ccK9CJjk.s:491    .text:0000000000000230 .L0 
     /tmp/ccK9CJjk.s:492    .text:0000000000000230 .L0 
GAS LISTING /tmp/ccK9CJjk.s 			page 33


     /tmp/ccK9CJjk.s:497    .text:0000000000000234 .L0 
  src/../h/Riscv.hpp:202    .text:0000000000000234 .L0 
     /tmp/ccK9CJjk.s:507    .text:0000000000000238 .L0 
     /tmp/ccK9CJjk.s:508    .text:0000000000000238 .L0 
     /tmp/ccK9CJjk.s:513    .text:000000000000023c .L0 
  src/../h/Riscv.hpp:134    .text:000000000000023c .L0 
     /tmp/ccK9CJjk.s:520    .text:0000000000000240 .L0 
     /tmp/ccK9CJjk.s:532    .text:0000000000000244 .L0 
     /tmp/ccK9CJjk.s:533    .text:0000000000000244 .L0 
     /tmp/ccK9CJjk.s:537    .text:0000000000000250 .L0 
     /tmp/ccK9CJjk.s:538    .text:0000000000000250 .L0 
     /tmp/ccK9CJjk.s:546    .text:000000000000025c .L0 
     /tmp/ccK9CJjk.s:547    .text:000000000000025c .L0 
     /tmp/ccK9CJjk.s:548    .text:000000000000025c .L0 
     /tmp/ccK9CJjk.s:549    .text:000000000000025c .L0 
     /tmp/ccK9CJjk.s:552    .text:0000000000000264 .L0 
     /tmp/ccK9CJjk.s:555    .text:0000000000000268 .L0 
     /tmp/ccK9CJjk.s:556    .text:0000000000000268 .L0 
     /tmp/ccK9CJjk.s:558    .text:0000000000000268 .L0 
     /tmp/ccK9CJjk.s:561    .text:0000000000000268 .L0 
     /tmp/ccK9CJjk.s:562    .text:0000000000000268 .L0 
     /tmp/ccK9CJjk.s:563    .text:0000000000000268 .L0 
  src/../h/Riscv.hpp:128    .text:0000000000000268 .L0 
     /tmp/ccK9CJjk.s:571    .text:0000000000000270 .L0 
     /tmp/ccK9CJjk.s:572    .text:0000000000000270 .L0 
     /tmp/ccK9CJjk.s:576    .text:0000000000000274 .L0 
     /tmp/ccK9CJjk.s:578    .text:0000000000000278 .L0 
     /tmp/ccK9CJjk.s:582    .text:000000000000027c .L0 
     /tmp/ccK9CJjk.s:583    .text:000000000000027c .L0 
     /tmp/ccK9CJjk.s:584    .text:000000000000027c .L0 
  src/../h/Riscv.hpp:196    .text:000000000000027c .L0 
     /tmp/ccK9CJjk.s:592    .text:0000000000000284 .L0 
     /tmp/ccK9CJjk.s:593    .text:0000000000000284 .L0 
     /tmp/ccK9CJjk.s:597    .text:0000000000000288 .L0 
     /tmp/ccK9CJjk.s:600    .text:000000000000028c .L0 
     /tmp/ccK9CJjk.s:601    .text:000000000000028c .L0 
     /tmp/ccK9CJjk.s:689    .text:00000000000002c4 .L0 
     /tmp/ccK9CJjk.s:691    .text:00000000000002c4 .L0 
     /tmp/ccK9CJjk.s:692    .text:00000000000002c4 .L0 
     /tmp/ccK9CJjk.s:693    .text:00000000000002c4 .L0 
     /tmp/ccK9CJjk.s:696    .text:00000000000002cc .L0 
     /tmp/ccK9CJjk.s:699    .text:00000000000002d0 .L0 
       src/Riscv.cpp:154    .text:00000000000002d0 .L0 
     /tmp/ccK9CJjk.s:705    .text:00000000000002d4 .L0 
     /tmp/ccK9CJjk.s:707    .text:00000000000002d4 .L0 
     /tmp/ccK9CJjk.s:710    .text:00000000000002dc .L0 
     /tmp/ccK9CJjk.s:714    .text:00000000000002e0 .L0 
     /tmp/ccK9CJjk.s:715    .text:00000000000002e0 .L0 
     /tmp/ccK9CJjk.s:716    .text:00000000000002e0 .L0 
     /tmp/ccK9CJjk.s:717    .text:00000000000002e0 .L0 
     /tmp/ccK9CJjk.s:724    .text:00000000000002ec .L0 
     /tmp/ccK9CJjk.s:725    .text:00000000000002ec .L0 
     /tmp/ccK9CJjk.s:726    .text:00000000000002ec .L0 
     /tmp/ccK9CJjk.s:731    .text:00000000000002f0 .L0 
  src/../h/Riscv.hpp:202    .text:00000000000002f0 .L0 
     /tmp/ccK9CJjk.s:741    .text:00000000000002f4 .L0 
     /tmp/ccK9CJjk.s:742    .text:00000000000002f4 .L0 
GAS LISTING /tmp/ccK9CJjk.s 			page 34


     /tmp/ccK9CJjk.s:747    .text:00000000000002f8 .L0 
  src/../h/Riscv.hpp:134    .text:00000000000002f8 .L0 
     /tmp/ccK9CJjk.s:760    .text:00000000000002fc .L0 
     /tmp/ccK9CJjk.s:768    .text:0000000000000300 .L0 
     /tmp/ccK9CJjk.s:769    .text:0000000000000300 .L0 
     /tmp/ccK9CJjk.s:770    .text:0000000000000300 .L0 
     /tmp/ccK9CJjk.s:771    .text:0000000000000300 .L0 
     /tmp/ccK9CJjk.s:775    .text:000000000000030c .L0 
     /tmp/ccK9CJjk.s:778    .text:0000000000000310 .L0 
     /tmp/ccK9CJjk.s:779    .text:0000000000000310 .L0 
     /tmp/ccK9CJjk.s:780    .text:0000000000000310 .L0 
     /tmp/ccK9CJjk.s:781    .text:0000000000000310 .L0 
     /tmp/ccK9CJjk.s:788    .text:0000000000000328 .L0 
     /tmp/ccK9CJjk.s:791    .text:000000000000032c .L0 
     /tmp/ccK9CJjk.s:792    .text:000000000000032c .L0 
     /tmp/ccK9CJjk.s:793    .text:000000000000032c .L0 
     /tmp/ccK9CJjk.s:794    .text:000000000000032c .L0 
     /tmp/ccK9CJjk.s:797    .text:0000000000000334 .L0 
     /tmp/ccK9CJjk.s:800    .text:0000000000000338 .L0 
     /tmp/ccK9CJjk.s:801    .text:0000000000000338 .L0 
     /tmp/ccK9CJjk.s:802    .text:0000000000000338 .L0 
     /tmp/ccK9CJjk.s:803    .text:0000000000000338 .L0 
     /tmp/ccK9CJjk.s:806    .text:0000000000000340 .L0 
     /tmp/ccK9CJjk.s:809    .text:0000000000000344 .L0 
     /tmp/ccK9CJjk.s:810    .text:0000000000000344 .L0 
     /tmp/ccK9CJjk.s:811    .text:0000000000000344 .L0 
     /tmp/ccK9CJjk.s:812    .text:0000000000000344 .L0 
     /tmp/ccK9CJjk.s:818    .text:0000000000000358 .L0 
     /tmp/ccK9CJjk.s:821    .text:000000000000035c .L0 
     /tmp/ccK9CJjk.s:822    .text:000000000000035c .L0 
     /tmp/ccK9CJjk.s:823    .text:000000000000035c .L0 
     /tmp/ccK9CJjk.s:824    .text:000000000000035c .L0 
     /tmp/ccK9CJjk.s:828    .text:0000000000000368 .L0 
     /tmp/ccK9CJjk.s:831    .text:000000000000036c .L0 
     /tmp/ccK9CJjk.s:832    .text:000000000000036c .L0 
     /tmp/ccK9CJjk.s:833    .text:000000000000036c .L0 
     /tmp/ccK9CJjk.s:834    .text:000000000000036c .L0 
     /tmp/ccK9CJjk.s:838    .text:0000000000000378 .L0 
     /tmp/ccK9CJjk.s:841    .text:000000000000037c .L0 
     /tmp/ccK9CJjk.s:842    .text:000000000000037c .L0 
     /tmp/ccK9CJjk.s:843    .text:000000000000037c .L0 
     /tmp/ccK9CJjk.s:844    .text:000000000000037c .L0 
     /tmp/ccK9CJjk.s:848    .text:0000000000000388 .L0 
     /tmp/ccK9CJjk.s:851    .text:000000000000038c .L0 
     /tmp/ccK9CJjk.s:852    .text:000000000000038c .L0 
     /tmp/ccK9CJjk.s:853    .text:000000000000038c .L0 
     /tmp/ccK9CJjk.s:854    .text:000000000000038c .L0 
     /tmp/ccK9CJjk.s:859    .text:000000000000039c .L0 
     /tmp/ccK9CJjk.s:862    .text:00000000000003a0 .L0 
     /tmp/ccK9CJjk.s:863    .text:00000000000003a0 .L0 
     /tmp/ccK9CJjk.s:864    .text:00000000000003a0 .L0 
     /tmp/ccK9CJjk.s:865    .text:00000000000003a0 .L0 
     /tmp/ccK9CJjk.s:869    .text:00000000000003ac .L0 
     /tmp/ccK9CJjk.s:872    .text:00000000000003b0 .L0 
     /tmp/ccK9CJjk.s:873    .text:00000000000003b0 .L0 
     /tmp/ccK9CJjk.s:874    .text:00000000000003b0 .L0 
     /tmp/ccK9CJjk.s:875    .text:00000000000003b0 .L0 
GAS LISTING /tmp/ccK9CJjk.s 			page 35


     /tmp/ccK9CJjk.s:879    .text:00000000000003bc .L0 
     /tmp/ccK9CJjk.s:882    .text:00000000000003c0 .L0 
     /tmp/ccK9CJjk.s:883    .text:00000000000003c0 .L0 
     /tmp/ccK9CJjk.s:884    .text:00000000000003c0 .L0 
     /tmp/ccK9CJjk.s:885    .text:00000000000003c0 .L0 
     /tmp/ccK9CJjk.s:888    .text:00000000000003c8 .L0 
     /tmp/ccK9CJjk.s:891    .text:00000000000003cc .L0 
     /tmp/ccK9CJjk.s:892    .text:00000000000003cc .L0 
     /tmp/ccK9CJjk.s:893    .text:00000000000003cc .L0 
     /tmp/ccK9CJjk.s:894    .text:00000000000003cc .L0 
     /tmp/ccK9CJjk.s:899    .text:00000000000003dc .L0 
     /tmp/ccK9CJjk.s:905    .text:00000000000003e0 .L0 
     /tmp/ccK9CJjk.s:911    .text:00000000000003e0 _ZN5Riscv14changePrivModeEv
     /tmp/ccK9CJjk.s:914    .text:00000000000003e0 .L0 
     /tmp/ccK9CJjk.s:915    .text:00000000000003e0 .L0 
     /tmp/ccK9CJjk.s:916    .text:00000000000003e4 .L0 
     /tmp/ccK9CJjk.s:918    .text:00000000000003e8 .L0 
     /tmp/ccK9CJjk.s:920    .text:00000000000003ec .L0 
     /tmp/ccK9CJjk.s:922    .text:00000000000003ec .L0 
     /tmp/ccK9CJjk.s:928    .text:00000000000003f8 .L0 
     /tmp/ccK9CJjk.s:929    .text:00000000000003f8 .L0 
     /tmp/ccK9CJjk.s:930    .text:00000000000003f8 .L0 
     /tmp/ccK9CJjk.s:941    .text:0000000000000400 .L0 
     /tmp/ccK9CJjk.s:942    .text:0000000000000404 .L0 
     /tmp/ccK9CJjk.s:943    .text:0000000000000404 .L0 
     /tmp/ccK9CJjk.s:945    .text:0000000000000408 .L0 
     /tmp/ccK9CJjk.s:947    .text:000000000000040c .L0 
     /tmp/ccK9CJjk.s:966    .text:000000000000040c .L0 
     /tmp/ccK9CJjk.s:24     .text:000000000000000c .L0 
     /tmp/ccK9CJjk.s:89     .text:0000000000000044 .L0 
     /tmp/ccK9CJjk.s:181    .text:00000000000000a4 .L0 
     /tmp/ccK9CJjk.s:293    .text:0000000000000144 .L0 
     /tmp/ccK9CJjk.s:305    .text:0000000000000158 .L0 
     /tmp/ccK9CJjk.s:311    .text:0000000000000164 .L0 
     /tmp/ccK9CJjk.s:365    .text:0000000000000194 .L0 
     /tmp/ccK9CJjk.s:377    .text:00000000000001b0 .L0 
     /tmp/ccK9CJjk.s:384    .text:00000000000001c4 .L0 
     /tmp/ccK9CJjk.s:485    .text:0000000000000220 .L0 
     /tmp/ccK9CJjk.s:534    .text:0000000000000248 .L0 
     /tmp/ccK9CJjk.s:615    .rodata:0000000000000000 .L21
     /tmp/ccK9CJjk.s:607    .text:00000000000002a4 .L0 
     /tmp/ccK9CJjk.s:922    .text:00000000000003ec .L0 
     /tmp/ccK9CJjk.s:40     .text:0000000000000020 .L2
     /tmp/ccK9CJjk.s:238    .text:0000000000000104 .L7
     /tmp/ccK9CJjk.s:553    .text:0000000000000268 .L8
     /tmp/ccK9CJjk.s:541    .text:000000000000025c .L9
     /tmp/ccK9CJjk.s:224    .text:00000000000000f0 .L37
     /tmp/ccK9CJjk.s:412    .text:00000000000001dc .L6
     /tmp/ccK9CJjk.s:356    .text:0000000000000194 .L13
     /tmp/ccK9CJjk.s:315    .text:0000000000000170 .L17
     /tmp/ccK9CJjk.s:522    .text:0000000000000244 .L38
     /tmp/ccK9CJjk.s:428    .text:00000000000001ec .L39
     /tmp/ccK9CJjk.s:442    .text:0000000000000200 .L40
     /tmp/ccK9CJjk.s:374    .text:00000000000001b0 .L15
     /tmp/ccK9CJjk.s:397    .text:00000000000001d4 .L16
     /tmp/ccK9CJjk.s:684    .text:00000000000002bc .L18
     /tmp/ccK9CJjk.s:721    .text:00000000000002ec .L19
GAS LISTING /tmp/ccK9CJjk.s 			page 36


     /tmp/ccK9CJjk.s:937    .text:0000000000000400 .L41
     /tmp/ccK9CJjk.s:711    .text:00000000000002e0 .L34
     /tmp/ccK9CJjk.s:761    .text:0000000000000300 .L33
     /tmp/ccK9CJjk.s:776    .text:0000000000000310 .L32
     /tmp/ccK9CJjk.s:789    .text:000000000000032c .L31
     /tmp/ccK9CJjk.s:798    .text:0000000000000338 .L30
     /tmp/ccK9CJjk.s:807    .text:0000000000000344 .L29
     /tmp/ccK9CJjk.s:819    .text:000000000000035c .L28
     /tmp/ccK9CJjk.s:829    .text:000000000000036c .L27
     /tmp/ccK9CJjk.s:839    .text:000000000000037c .L26
     /tmp/ccK9CJjk.s:849    .text:000000000000038c .L25
     /tmp/ccK9CJjk.s:860    .text:00000000000003a0 .L24
     /tmp/ccK9CJjk.s:870    .text:00000000000003b0 .L23
     /tmp/ccK9CJjk.s:880    .text:00000000000003c0 .L22
     /tmp/ccK9CJjk.s:889    .text:00000000000003cc .L20
     /tmp/ccK9CJjk.s:3332   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccK9CJjk.s:5053   .debug_str:0000000000000d0f .LASF279
     /tmp/ccK9CJjk.s:4705   .debug_str:0000000000000258 .LASF280
     /tmp/ccK9CJjk.s:4803   .debug_str:000000000000054c .LASF281
     /tmp/ccK9CJjk.s:8      .text:0000000000000000 .Ltext0
     /tmp/ccK9CJjk.s:958    .text:000000000000040c .Letext0
     /tmp/ccK9CJjk.s:4629   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccK9CJjk.s:4811   .debug_str:0000000000000596 .LASF0
     /tmp/ccK9CJjk.s:4855   .debug_str:00000000000006db .LASF1
     /tmp/ccK9CJjk.s:4997   .debug_str:0000000000000b6c .LASF2
     /tmp/ccK9CJjk.s:5009   .debug_str:0000000000000bde .LASF4
     /tmp/ccK9CJjk.s:4829   .debug_str:0000000000000610 .LASF3
     /tmp/ccK9CJjk.s:4651   .debug_str:00000000000000ae .LASF5
     /tmp/ccK9CJjk.s:4965   .debug_str:0000000000000a92 .LASF6
     /tmp/ccK9CJjk.s:4955   .debug_str:0000000000000a29 .LASF7
     /tmp/ccK9CJjk.s:4843   .debug_str:0000000000000693 .LASF8
     /tmp/ccK9CJjk.s:4769   .debug_str:000000000000043e .LASF9
     /tmp/ccK9CJjk.s:4785   .debug_str:00000000000004b0 .LASF10
     /tmp/ccK9CJjk.s:4689   .debug_str:00000000000001f9 .LASF11
     /tmp/ccK9CJjk.s:4753   .debug_str:00000000000003d0 .LASF12
     /tmp/ccK9CJjk.s:4707   .debug_str:0000000000000266 .LASF13
     /tmp/ccK9CJjk.s:4687   .debug_str:00000000000001e9 .LASF14
     /tmp/ccK9CJjk.s:5063   .debug_str:0000000000000e05 .LASF15
     /tmp/ccK9CJjk.s:4735   .debug_str:000000000000033d .LASF16
     /tmp/ccK9CJjk.s:5045   .debug_str:0000000000000cce .LASF17
     /tmp/ccK9CJjk.s:4949   .debug_str:00000000000009e0 .LASF33
     /tmp/ccK9CJjk.s:4945   .debug_str:00000000000009c1 .LASF30
     /tmp/ccK9CJjk.s:4691   .debug_str:0000000000000208 .LASF18
     /tmp/ccK9CJjk.s:4853   .debug_str:00000000000006d6 .LASF19
     /tmp/ccK9CJjk.s:4807   .debug_str:0000000000000584 .LASF67
     /tmp/ccK9CJjk.s:5173   .debug_str:000000000000113a .LASF69
     /tmp/ccK9CJjk.s:4697   .debug_str:0000000000000221 .LASF20
     /tmp/ccK9CJjk.s:4951   .debug_str:00000000000009f0 .LASF22
     /tmp/ccK9CJjk.s:4663   .debug_str:00000000000000f2 .LASF24
     /tmp/ccK9CJjk.s:4963   .debug_str:0000000000000a6d .LASF26
     /tmp/ccK9CJjk.s:4925   .debug_str:0000000000000905 .LASF21
     /tmp/ccK9CJjk.s:4883   .debug_str:00000000000007bd .LASF23
     /tmp/ccK9CJjk.s:5037   .debug_str:0000000000000c82 .LASF25
     /tmp/ccK9CJjk.s:5181   .debug_str:000000000000119e .LASF27
     /tmp/ccK9CJjk.s:4863   .debug_str:0000000000000707 .LASF28
     /tmp/ccK9CJjk.s:4833   .debug_str:000000000000062e .LASF29
     /tmp/ccK9CJjk.s:4871   .debug_str:000000000000075a .LASF282
GAS LISTING /tmp/ccK9CJjk.s 			page 37


     /tmp/ccK9CJjk.s:4827   .debug_str:0000000000000606 .LASF77
     /tmp/ccK9CJjk.s:5197   .debug_str:0000000000001234 .LASF79
     /tmp/ccK9CJjk.s:4989   .debug_str:0000000000000b17 .LASF31
     /tmp/ccK9CJjk.s:4771   .debug_str:000000000000044e .LASF32
     /tmp/ccK9CJjk.s:5161   .debug_str:00000000000010e5 .LASF34
     /tmp/ccK9CJjk.s:4719   .debug_str:00000000000002d2 .LASF283
     /tmp/ccK9CJjk.s:4751   .debug_str:00000000000003cb .LASF35
     /tmp/ccK9CJjk.s:4913   .debug_str:00000000000008ae .LASF36
     /tmp/ccK9CJjk.s:4903   .debug_str:000000000000087f .LASF37
     /tmp/ccK9CJjk.s:5047   .debug_str:0000000000000ce4 .LASF38
     /tmp/ccK9CJjk.s:4749   .debug_str:00000000000003b4 .LASF44
     /tmp/ccK9CJjk.s:5001   .debug_str:0000000000000b82 .LASF284
     /tmp/ccK9CJjk.s:4987   .debug_str:0000000000000b00 .LASF285
     /tmp/ccK9CJjk.s:4849   .debug_str:00000000000006c4 .LASF39
     /tmp/ccK9CJjk.s:5175   .debug_str:000000000000115e .LASF40
     /tmp/ccK9CJjk.s:4877   .debug_str:0000000000000796 .LASF41
     /tmp/ccK9CJjk.s:4709   .debug_str:0000000000000276 .LASF42
     /tmp/ccK9CJjk.s:5013   .debug_str:0000000000000bea .LASF43
     /tmp/ccK9CJjk.s:5163   .debug_str:00000000000010ef .LASF45
     /tmp/ccK9CJjk.s:5213   .debug_str:00000000000012cc .LASF46
     /tmp/ccK9CJjk.s:5139   .debug_str:0000000000001037 .LASF47
     /tmp/ccK9CJjk.s:5031   .debug_str:0000000000000c65 .LASF48
     /tmp/ccK9CJjk.s:4841   .debug_str:0000000000000676 .LASF49
     /tmp/ccK9CJjk.s:4981   .debug_str:0000000000000ae7 .LASF50
     /tmp/ccK9CJjk.s:4643   .debug_str:0000000000000054 .LASF51
     /tmp/ccK9CJjk.s:5075   .debug_str:0000000000000e4f .LASF52
     /tmp/ccK9CJjk.s:5205   .debug_str:0000000000001296 .LASF53
     /tmp/ccK9CJjk.s:4779   .debug_str:000000000000047a .LASF54
     /tmp/ccK9CJjk.s:4639   .debug_str:000000000000003c .LASF55
     /tmp/ccK9CJjk.s:4931   .debug_str:0000000000000937 .LASF56
     /tmp/ccK9CJjk.s:5011   .debug_str:0000000000000be5 .LASF57
     /tmp/ccK9CJjk.s:4647   .debug_str:0000000000000096 .LASF58
     /tmp/ccK9CJjk.s:5061   .debug_str:0000000000000df8 .LASF59
     /tmp/ccK9CJjk.s:4995   .debug_str:0000000000000b48 .LASF60
     /tmp/ccK9CJjk.s:4941   .debug_str:00000000000009b2 .LASF286
     /tmp/ccK9CJjk.s:4817   .debug_str:00000000000005c7 .LASF61
     /tmp/ccK9CJjk.s:4879   .debug_str:000000000000079e .LASF62
     /tmp/ccK9CJjk.s:4693   .debug_str:000000000000020d .LASF63
     /tmp/ccK9CJjk.s:4917   .debug_str:00000000000008c3 .LASF64
     /tmp/ccK9CJjk.s:4861   .debug_str:00000000000006fa .LASF65
     /tmp/ccK9CJjk.s:5145   .debug_str:0000000000001065 .LASF66
     /tmp/ccK9CJjk.s:4859   .debug_str:00000000000006f4 .LASF68
     /tmp/ccK9CJjk.s:5103   .debug_str:0000000000000f20 .LASF70
     /tmp/ccK9CJjk.s:5091   .debug_str:0000000000000ecb .LASF104
     /tmp/ccK9CJjk.s:4999   .debug_str:0000000000000b7a .LASF71
     /tmp/ccK9CJjk.s:5157   .debug_str:00000000000010ca .LASF72
     /tmp/ccK9CJjk.s:5199   .debug_str:000000000000126a .LASF73
     /tmp/ccK9CJjk.s:5185   .debug_str:00000000000011cd .LASF74
     /tmp/ccK9CJjk.s:5077   .debug_str:0000000000000e57 .LASF75
     /tmp/ccK9CJjk.s:5069   .debug_str:0000000000000e2c .LASF76
     /tmp/ccK9CJjk.s:4937   .debug_str:0000000000000993 .LASF287
     /tmp/ccK9CJjk.s:5039   .debug_str:0000000000000c8e .LASF78
     /tmp/ccK9CJjk.s:4933   .debug_str:0000000000000944 .LASF80
     /tmp/ccK9CJjk.s:4659   .debug_str:00000000000000d8 .LASF94
     /tmp/ccK9CJjk.s:4745   .debug_str:000000000000038b .LASF96
     /tmp/ccK9CJjk.s:4805   .debug_str:0000000000000573 .LASF81
     /tmp/ccK9CJjk.s:4679   .debug_str:000000000000017f .LASF82
GAS LISTING /tmp/ccK9CJjk.s 			page 38


     /tmp/ccK9CJjk.s:5027   .debug_str:0000000000000c41 .LASF83
     /tmp/ccK9CJjk.s:4837   .debug_str:000000000000064b .LASF84
     /tmp/ccK9CJjk.s:4637   .debug_str:0000000000000037 .LASF85
     /tmp/ccK9CJjk.s:4885   .debug_str:00000000000007e4 .LASF86
     /tmp/ccK9CJjk.s:5119   .debug_str:0000000000000fb3 .LASF87
     /tmp/ccK9CJjk.s:5155   .debug_str:00000000000010c3 .LASF88
     /tmp/ccK9CJjk.s:4821   .debug_str:00000000000005d7 .LASF89
     /tmp/ccK9CJjk.s:5107   .debug_str:0000000000000f39 .LASF90
     /tmp/ccK9CJjk.s:5025   .debug_str:0000000000000c30 .LASF91
     /tmp/ccK9CJjk.s:4929   .debug_str:000000000000092f .LASF92
     /tmp/ccK9CJjk.s:4661   .debug_str:00000000000000ea .LASF93
     /tmp/ccK9CJjk.s:4961   .debug_str:0000000000000a5f .LASF95
     /tmp/ccK9CJjk.s:4895   .debug_str:0000000000000823 .LASF97
     /tmp/ccK9CJjk.s:4781   .debug_str:0000000000000486 .LASF98
     /tmp/ccK9CJjk.s:4727   .debug_str:00000000000002eb .LASF99
     /tmp/ccK9CJjk.s:4721   .debug_str:00000000000002d7 .LASF100
     /tmp/ccK9CJjk.s:4701   .debug_str:000000000000023b .LASF101
     /tmp/ccK9CJjk.s:4713   .debug_str:00000000000002a8 .LASF102
     /tmp/ccK9CJjk.s:4645   .debug_str:000000000000006e .LASF103
     /tmp/ccK9CJjk.s:5043   .debug_str:0000000000000cc0 .LASF105
     /tmp/ccK9CJjk.s:4969   .debug_str:0000000000000aa3 .LASF106
     /tmp/ccK9CJjk.s:4717   .debug_str:00000000000002c2 .LASF107
     /tmp/ccK9CJjk.s:5135   .debug_str:000000000000101c .LASF108
     /tmp/ccK9CJjk.s:4831   .debug_str:0000000000000622 .LASF109
     /tmp/ccK9CJjk.s:5195   .debug_str:000000000000122d .LASF288
     /tmp/ccK9CJjk.s:5033   .debug_str:0000000000000c70 .LASF110
     /tmp/ccK9CJjk.s:4699   .debug_str:0000000000000231 .LASF111
     /tmp/ccK9CJjk.s:4851   .debug_str:00000000000006cd .LASF112
     /tmp/ccK9CJjk.s:4677   .debug_str:0000000000000176 .LASF113
     /tmp/ccK9CJjk.s:4985   .debug_str:0000000000000afb .LASF114
     /tmp/ccK9CJjk.s:5167   .debug_str:000000000000111c .LASF115
     /tmp/ccK9CJjk.s:4847   .debug_str:00000000000006b9 .LASF119
     /tmp/ccK9CJjk.s:4787   .debug_str:00000000000004be .LASF116
     /tmp/ccK9CJjk.s:4741   .debug_str:000000000000037a .LASF117
     /tmp/ccK9CJjk.s:5183   .debug_str:00000000000011c4 .LASF118
     /tmp/ccK9CJjk.s:5149   .debug_str:0000000000001092 .LASF120
     /tmp/ccK9CJjk.s:4747   .debug_str:00000000000003a8 .LASF121
     /tmp/ccK9CJjk.s:5093   .debug_str:0000000000000ed3 .LASF122
     /tmp/ccK9CJjk.s:4715   .debug_str:00000000000002b6 .LASF123
     /tmp/ccK9CJjk.s:4939   .debug_str:00000000000009ab .LASF124
     /tmp/ccK9CJjk.s:4795   .debug_str:000000000000051b .LASF125
     /tmp/ccK9CJjk.s:4921   .debug_str:00000000000008e4 .LASF126
     /tmp/ccK9CJjk.s:4673   .debug_str:0000000000000162 .LASF127
     /tmp/ccK9CJjk.s:4791   .debug_str:00000000000004ef .LASF128
     /tmp/ccK9CJjk.s:5021   .debug_str:0000000000000c1c .LASF129
     /tmp/ccK9CJjk.s:4739   .debug_str:000000000000035f .LASF130
     /tmp/ccK9CJjk.s:4907   .debug_str:0000000000000890 .LASF131
     /tmp/ccK9CJjk.s:5177   .debug_str:000000000000117c .LASF132
     /tmp/ccK9CJjk.s:5137   .debug_str:000000000000102e .LASF135
     /tmp/ccK9CJjk.s:5121   .debug_str:0000000000000fbb .LASF137
     /tmp/ccK9CJjk.s:4993   .debug_str:0000000000000b3f .LASF133
     /tmp/ccK9CJjk.s:5095   .debug_str:0000000000000ee0 .LASF134
     /tmp/ccK9CJjk.s:4971   .debug_str:0000000000000aaf .LASF136
     /tmp/ccK9CJjk.s:4975   .debug_str:0000000000000abb .LASF138
     /tmp/ccK9CJjk.s:4919   .debug_str:00000000000008dd .LASF139
     /tmp/ccK9CJjk.s:4845   .debug_str:00000000000006a6 .LASF140
     /tmp/ccK9CJjk.s:5179   .debug_str:0000000000001196 .LASF141
GAS LISTING /tmp/ccK9CJjk.s 			page 39


     /tmp/ccK9CJjk.s:5059   .debug_str:0000000000000de4 .LASF142
     /tmp/ccK9CJjk.s:4911   .debug_str:00000000000008a6 .LASF143
     /tmp/ccK9CJjk.s:4759   .debug_str:00000000000003f9 .LASF144
     /tmp/ccK9CJjk.s:4869   .debug_str:0000000000000752 .LASF145
     /tmp/ccK9CJjk.s:4979   .debug_str:0000000000000ad3 .LASF146
     /tmp/ccK9CJjk.s:5209   .debug_str:00000000000012b5 .LASF147
     /tmp/ccK9CJjk.s:5147   .debug_str:000000000000107e .LASF148
     /tmp/ccK9CJjk.s:5057   .debug_str:0000000000000ddd .LASF149
     /tmp/ccK9CJjk.s:5015   .debug_str:0000000000000bf6 .LASF150
     /tmp/ccK9CJjk.s:5017   .debug_str:0000000000000c09 .LASF151
     /tmp/ccK9CJjk.s:4733   .debug_str:000000000000032a .LASF152
     /tmp/ccK9CJjk.s:4725   .debug_str:00000000000002e5 .LASF153
     /tmp/ccK9CJjk.s:5085   .debug_str:0000000000000e82 .LASF154
     /tmp/ccK9CJjk.s:4819   .debug_str:00000000000005d1 .LASF155
     /tmp/ccK9CJjk.s:4793   .debug_str:0000000000000509 .LASF156
     /tmp/ccK9CJjk.s:4653   .debug_str:00000000000000b5 .LASF157
     /tmp/ccK9CJjk.s:5003   .debug_str:0000000000000b8c .LASF158
     /tmp/ccK9CJjk.s:4757   .debug_str:00000000000003ee .LASF159
     /tmp/ccK9CJjk.s:5203   .debug_str:000000000000127e .LASF160
     /tmp/ccK9CJjk.s:5169   .debug_str:0000000000001122 .LASF161
     /tmp/ccK9CJjk.s:5187   .debug_str:00000000000011de .LASF162
     /tmp/ccK9CJjk.s:4695   .debug_str:0000000000000217 .LASF163
     /tmp/ccK9CJjk.s:4897   .debug_str:000000000000083c .LASF164
     /tmp/ccK9CJjk.s:5125   .debug_str:0000000000000fd5 .LASF165
     /tmp/ccK9CJjk.s:4783   .debug_str:0000000000000494 .LASF166
     /tmp/ccK9CJjk.s:4675   .debug_str:000000000000016f .LASF167
     /tmp/ccK9CJjk.s:4823   .debug_str:00000000000005ec .LASF168
     /tmp/ccK9CJjk.s:4665   .debug_str:00000000000000ff .LASF169
     /tmp/ccK9CJjk.s:5023   .debug_str:0000000000000c2a .LASF170
     /tmp/ccK9CJjk.s:4857   .debug_str:00000000000006ee .LASF171
     /tmp/ccK9CJjk.s:5081   .debug_str:0000000000000e6d .LASF172
     /tmp/ccK9CJjk.s:4893   .debug_str:0000000000000819 .LASF173
     /tmp/ccK9CJjk.s:5087   .debug_str:0000000000000e94 .LASF174
     /tmp/ccK9CJjk.s:5133   .debug_str:0000000000001010 .LASF175
     /tmp/ccK9CJjk.s:4957   .debug_str:0000000000000a3c .LASF176
     /tmp/ccK9CJjk.s:4839   .debug_str:0000000000000654 .LASF177
     /tmp/ccK9CJjk.s:5189   .debug_str:00000000000011f4 .LASF178
     /tmp/ccK9CJjk.s:5029   .debug_str:0000000000000c49 .LASF179
     /tmp/ccK9CJjk.s:5109   .debug_str:0000000000000f43 .LASF180
     /tmp/ccK9CJjk.s:4891   .debug_str:000000000000080a .LASF181
     /tmp/ccK9CJjk.s:4671   .debug_str:0000000000000139 .LASF182
     /tmp/ccK9CJjk.s:4669   .debug_str:000000000000012e .LASF183
     /tmp/ccK9CJjk.s:4935   .debug_str:0000000000000972 .LASF184
     /tmp/ccK9CJjk.s:5129   .debug_str:0000000000000fe9 .LASF185
     /tmp/ccK9CJjk.s:5111   .debug_str:0000000000000f51 .LASF186
     /tmp/ccK9CJjk.s:5051   .debug_str:0000000000000cfe .LASF187
     /tmp/ccK9CJjk.s:5159   .debug_str:00000000000010dc .LASF188
     /tmp/ccK9CJjk.s:4773   .debug_str:0000000000000461 .LASF189
     /tmp/ccK9CJjk.s:4905   .debug_str:0000000000000884 .LASF190
     /tmp/ccK9CJjk.s:5113   .debug_str:0000000000000f72 .LASF191
     /tmp/ccK9CJjk.s:5201   .debug_str:0000000000001271 .LASF192
     /tmp/ccK9CJjk.s:4711   .debug_str:0000000000000293 .LASF193
     /tmp/ccK9CJjk.s:5211   .debug_str:00000000000012bd .LASF194
     /tmp/ccK9CJjk.s:4867   .debug_str:000000000000072b .LASF195
     /tmp/ccK9CJjk.s:4915   .debug_str:00000000000008b3 .LASF196
     /tmp/ccK9CJjk.s:4667   .debug_str:0000000000000108 .LASF197
     /tmp/ccK9CJjk.s:4835   .debug_str:000000000000063c .LASF198
GAS LISTING /tmp/ccK9CJjk.s 			page 40


     /tmp/ccK9CJjk.s:4899   .debug_str:0000000000000852 .LASF199
     /tmp/ccK9CJjk.s:4953   .debug_str:0000000000000a18 .LASF200
     /tmp/ccK9CJjk.s:5115   .debug_str:0000000000000f87 .LASF201
     /tmp/ccK9CJjk.s:5065   .debug_str:0000000000000e11 .LASF202
     /tmp/ccK9CJjk.s:5089   .debug_str:0000000000000ea0 .LASF203
     /tmp/ccK9CJjk.s:4887   .debug_str:00000000000007ea .LASF204
     /tmp/ccK9CJjk.s:4789   .debug_str:00000000000004c7 .LASF205
     /tmp/ccK9CJjk.s:4635   .debug_str:0000000000000025 .LASF206
     /tmp/ccK9CJjk.s:4685   .debug_str:00000000000001c3 .LASF207
     /tmp/ccK9CJjk.s:4865   .debug_str:0000000000000716 .LASF208
     /tmp/ccK9CJjk.s:4683   .debug_str:00000000000001ad .LASF209
     /tmp/ccK9CJjk.s:5073   .debug_str:0000000000000e47 .LASF210
     /tmp/ccK9CJjk.s:4801   .debug_str:0000000000000531 .LASF211
     /tmp/ccK9CJjk.s:4723   .debug_str:00000000000002e0 .LASF212
     /tmp/ccK9CJjk.s:4815   .debug_str:00000000000005af .LASF213
     /tmp/ccK9CJjk.s:5067   .debug_str:0000000000000e25 .LASF214
     /tmp/ccK9CJjk.s:4729   .debug_str:0000000000000305 .LASF215
     /tmp/ccK9CJjk.s:4809   .debug_str:0000000000000590 .LASF216
     /tmp/ccK9CJjk.s:5099   .debug_str:0000000000000f02 .LASF217
     /tmp/ccK9CJjk.s:4641   .debug_str:000000000000004c .LASF218
     /tmp/ccK9CJjk.s:4927   .debug_str:0000000000000914 .LASF219
     /tmp/ccK9CJjk.s:4799   .debug_str:000000000000052b .LASF220
     /tmp/ccK9CJjk.s:4983   .debug_str:0000000000000af0 .LASF221
     /tmp/ccK9CJjk.s:5171   .debug_str:000000000000112c .LASF222
     /tmp/ccK9CJjk.s:4889   .debug_str:00000000000007fc .LASF223
     /tmp/ccK9CJjk.s:5105   .debug_str:0000000000000f30 .LASF224
     /tmp/ccK9CJjk.s:4703   .debug_str:000000000000024e .LASF225
     /tmp/ccK9CJjk.s:4909   .debug_str:000000000000089d .LASF226
     /tmp/ccK9CJjk.s:5083   .debug_str:0000000000000e77 .LASF227
     /tmp/ccK9CJjk.s:5165   .debug_str:000000000000110d .LASF228
     /tmp/ccK9CJjk.s:5097   .debug_str:0000000000000ef5 .LASF229
     /tmp/ccK9CJjk.s:4743   .debug_str:0000000000000383 .LASF230
     /tmp/ccK9CJjk.s:4777   .debug_str:0000000000000472 .LASF231
     /tmp/ccK9CJjk.s:5207   .debug_str:00000000000012a3 .LASF289
     /tmp/ccK9CJjk.s:5055   .debug_str:0000000000000dd3 .LASF232
     /tmp/ccK9CJjk.s:4649   .debug_str:00000000000000a2 .LASF233
     /tmp/ccK9CJjk.s:4631   .debug_str:0000000000000000 .LASF234
     /tmp/ccK9CJjk.s:4875   .debug_str:0000000000000773 .LASF235
     /tmp/ccK9CJjk.s:4923   .debug_str:00000000000008fc .LASF236
     /tmp/ccK9CJjk.s:5035   .debug_str:0000000000000c78 .LASF237
     /tmp/ccK9CJjk.s:4873   .debug_str:0000000000000766 .LASF238
     /tmp/ccK9CJjk.s:5041   .debug_str:0000000000000ca2 .LASF239
     /tmp/ccK9CJjk.s:5019   .debug_str:0000000000000c10 .LASF240
     /tmp/ccK9CJjk.s:5007   .debug_str:0000000000000bc1 .LASF241
     /tmp/ccK9CJjk.s:4775   .debug_str:0000000000000467 .LASF242
     /tmp/ccK9CJjk.s:5131   .debug_str:0000000000000ff4 .LASF243
     /tmp/ccK9CJjk.s:4655   .debug_str:00000000000000c0 .LASF244
     /tmp/ccK9CJjk.s:4991   .debug_str:0000000000000b23 .LASF245
     /tmp/ccK9CJjk.s:4763   .debug_str:0000000000000412 .LASF246
     /tmp/ccK9CJjk.s:5005   .debug_str:0000000000000ba4 .LASF247
     /tmp/ccK9CJjk.s:4737   .debug_str:0000000000000353 .LASF248
     /tmp/ccK9CJjk.s:5151   .debug_str:00000000000010a1 .LASF249
     /tmp/ccK9CJjk.s:4813   .debug_str:00000000000005a3 .LASF250
     /tmp/ccK9CJjk.s:5193   .debug_str:0000000000001210 .LASF251
     /tmp/ccK9CJjk.s:4943   .debug_str:00000000000009b7 .LASF252
     /tmp/ccK9CJjk.s:4967   .debug_str:0000000000000a99 .LASF253
     /tmp/ccK9CJjk.s:5079   .debug_str:0000000000000e62 .LASF254
GAS LISTING /tmp/ccK9CJjk.s 			page 41


     /tmp/ccK9CJjk.s:4731   .debug_str:000000000000031f .LASF255
     /tmp/ccK9CJjk.s:5141   .debug_str:0000000000001052 .LASF256
     /tmp/ccK9CJjk.s:4657   .debug_str:00000000000000cb .LASF257
     /tmp/ccK9CJjk.s:4767   .debug_str:000000000000042b .LASF258
     /tmp/ccK9CJjk.s:4825   .debug_str:00000000000005f4 .LASF259
     /tmp/ccK9CJjk.s:4765   .debug_str:000000000000041e .LASF260
     /tmp/ccK9CJjk.s:5191   .debug_str:0000000000001203 .LASF261
     /tmp/ccK9CJjk.s:4633   .debug_str:0000000000000011 .LASF262
     /tmp/ccK9CJjk.s:4681   .debug_str:000000000000019b .LASF263
     /tmp/ccK9CJjk.s:5071   .debug_str:0000000000000e42 .LASF264
     /tmp/ccK9CJjk.s:4947   .debug_str:00000000000009ce .LASF290
     /tmp/ccK9CJjk.s:912    .text:00000000000003e0 .LFB35
     /tmp/ccK9CJjk.s:948    .text:000000000000040c .LFE35
     /tmp/ccK9CJjk.s:926    .text:00000000000003f8 .LBB106
     /tmp/ccK9CJjk.s:939    .text:0000000000000400 .LBE106
     /tmp/ccK9CJjk.s:4496   .debug_loc:0000000000000000 .LLST12
     /tmp/ccK9CJjk.s:69     .text:0000000000000034 .LFB34
     /tmp/ccK9CJjk.s:115    .text:0000000000000068 .LFE34
     /tmp/ccK9CJjk.s:4797   .debug_str:0000000000000526 .LASF265
     /tmp/ccK9CJjk.s:121    .text:0000000000000068 .LFB33
     /tmp/ccK9CJjk.s:906    .text:00000000000003e0 .LFE33
     /tmp/ccK9CJjk.s:5123   .debug_str:0000000000000fd0 .LASF266
     /tmp/ccK9CJjk.s:4973   .debug_str:0000000000000ab6 .LASF267
     /tmp/ccK9CJjk.s:5127   .debug_str:0000000000000fe4 .LASF268
     /tmp/ccK9CJjk.s:4977   .debug_str:0000000000000ace .LASF269
     /tmp/ccK9CJjk.s:5143   .debug_str:000000000000105e .LASF270
     /tmp/ccK9CJjk.s:5049   .debug_str:0000000000000cf7 .LASF271
     /tmp/ccK9CJjk.s:444    .text:0000000000000200 .LBB71
     /tmp/ccK9CJjk.s:525    .text:0000000000000244 .LBE71
     /tmp/ccK9CJjk.s:5101   .debug_str:0000000000000f1b .LASF272
     /tmp/ccK9CJjk.s:4901   .debug_str:0000000000000877 .LASF273
     /tmp/ccK9CJjk.s:446    .text:0000000000000200 .LBB72
     /tmp/ccK9CJjk.s:461    .text:000000000000020c .LBE72
     /tmp/ccK9CJjk.s:465    .text:0000000000000210 .LBB74
     /tmp/ccK9CJjk.s:480    .text:000000000000021c .LBE74
     /tmp/ccK9CJjk.s:494    .text:0000000000000234 .LBB76
     /tmp/ccK9CJjk.s:505    .text:0000000000000238 .LBE76
     /tmp/ccK9CJjk.s:4505   .debug_loc:0000000000000026 .LLST6
     /tmp/ccK9CJjk.s:510    .text:000000000000023c .LBB78
     /tmp/ccK9CJjk.s:524    .text:0000000000000244 .LBE78
     /tmp/ccK9CJjk.s:4512   .debug_loc:0000000000000049 .LLST7
     /tmp/ccK9CJjk.s:489    .text:0000000000000230 .LVL21
     /tmp/ccK9CJjk.s:4609   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccK9CJjk.s:4755   .debug_str:00000000000003df .LASF274
     /tmp/ccK9CJjk.s:4519   .debug_loc:000000000000006c .LLST1
     /tmp/ccK9CJjk.s:5117   .debug_str:0000000000000fae .LASF275
     /tmp/ccK9CJjk.s:4526   .debug_loc:000000000000008f .LLST2
     /tmp/ccK9CJjk.s:539    .text:0000000000000258 .LVL27
     /tmp/ccK9CJjk.s:254    .text:0000000000000124 .LBB55
     /tmp/ccK9CJjk.s:269    .text:0000000000000130 .LBE55
     /tmp/ccK9CJjk.s:273    .text:0000000000000134 .LBB57
     /tmp/ccK9CJjk.s:288    .text:0000000000000140 .LBE57
     /tmp/ccK9CJjk.s:328    .text:0000000000000184 .LBB62
     /tmp/ccK9CJjk.s:339    .text:0000000000000188 .LBE62
     /tmp/ccK9CJjk.s:4537   .debug_loc:00000000000000c5 .LLST3
     /tmp/ccK9CJjk.s:344    .text:000000000000018c .LBB64
     /tmp/ccK9CJjk.s:358    .text:0000000000000194 .LBE64
GAS LISTING /tmp/ccK9CJjk.s 			page 42


     /tmp/ccK9CJjk.s:4544   .debug_loc:00000000000000e8 .LLST4
     /tmp/ccK9CJjk.s:321    .text:0000000000000178 .LVL9
     /tmp/ccK9CJjk.s:323    .text:0000000000000180 .LVL10
     /tmp/ccK9CJjk.s:690    .text:00000000000002c4 .LBB92
     /tmp/ccK9CJjk.s:712    .text:00000000000002e0 .LBE92
     /tmp/ccK9CJjk.s:4551   .debug_loc:000000000000010b .LLST9
     /tmp/ccK9CJjk.s:694    .text:00000000000002cc .LVL29
     /tmp/ccK9CJjk.s:708    .text:00000000000002dc .LVL31
     /tmp/ccK9CJjk.s:559    .text:0000000000000268 .LBB86
     /tmp/ccK9CJjk.s:574    .text:0000000000000274 .LBE86
     /tmp/ccK9CJjk.s:580    .text:000000000000027c .LBB88
     /tmp/ccK9CJjk.s:595    .text:0000000000000288 .LBE88
     /tmp/ccK9CJjk.s:728    .text:00000000000002f0 .LBB94
     /tmp/ccK9CJjk.s:739    .text:00000000000002f4 .LBE94
     /tmp/ccK9CJjk.s:4558   .debug_loc:000000000000012e .LLST10
     /tmp/ccK9CJjk.s:744    .text:00000000000002f8 .LBB96
     /tmp/ccK9CJjk.s:755    .text:00000000000002fc .LBE96
     /tmp/ccK9CJjk.s:4565   .debug_loc:0000000000000151 .LLST11
     /tmp/ccK9CJjk.s:719    .text:00000000000002ec .LVL32
     /tmp/ccK9CJjk.s:773    .text:000000000000030c .LVL37
     /tmp/ccK9CJjk.s:786    .text:0000000000000328 .LVL38
     /tmp/ccK9CJjk.s:795    .text:0000000000000334 .LVL39
     /tmp/ccK9CJjk.s:804    .text:0000000000000340 .LVL40
     /tmp/ccK9CJjk.s:816    .text:0000000000000358 .LVL41
     /tmp/ccK9CJjk.s:826    .text:0000000000000368 .LVL42
     /tmp/ccK9CJjk.s:836    .text:0000000000000378 .LVL43
     /tmp/ccK9CJjk.s:846    .text:0000000000000388 .LVL44
     /tmp/ccK9CJjk.s:857    .text:000000000000039c .LVL45
     /tmp/ccK9CJjk.s:867    .text:00000000000003ac .LVL46
     /tmp/ccK9CJjk.s:877    .text:00000000000003bc .LVL47
     /tmp/ccK9CJjk.s:886    .text:00000000000003c8 .LVL48
     /tmp/ccK9CJjk.s:897    .text:00000000000003dc .LVL49
     /tmp/ccK9CJjk.s:184    .text:00000000000000b0 .LBB50
     /tmp/ccK9CJjk.s:199    .text:00000000000000bc .LBE50
     /tmp/ccK9CJjk.s:386    .text:00000000000001cc .LBB69
     /tmp/ccK9CJjk.s:394    .text:00000000000001d0 .LBE69
     /tmp/ccK9CJjk.s:4572   .debug_loc:0000000000000174 .LLST5
     /tmp/ccK9CJjk.s:401    .text:00000000000001d4 .LBB80
     /tmp/ccK9CJjk.s:414    .text:00000000000001dc .LBE80
     /tmp/ccK9CJjk.s:4579   .debug_loc:0000000000000197 .LLST8
     /tmp/ccK9CJjk.s:221    .text:00000000000000ec .LVL3
     /tmp/ccK9CJjk.s:235    .text:0000000000000100 .LVL4
     /tmp/ccK9CJjk.s:436    .text:00000000000001f4 .LVL19
     /tmp/ccK9CJjk.s:440    .text:00000000000001fc .LVL20
     /tmp/ccK9CJjk.s:550    .text:0000000000000264 .LVL28
     /tmp/ccK9CJjk.s:13     .text:0000000000000000 .LFB32
     /tmp/ccK9CJjk.s:63     .text:0000000000000034 .LFE32
     /tmp/ccK9CJjk.s:28     .text:0000000000000018 .LBB48
     /tmp/ccK9CJjk.s:42     .text:0000000000000020 .LBE48
     /tmp/ccK9CJjk.s:4587   .debug_loc:00000000000001bb .LLST0
     /tmp/ccK9CJjk.s:5153   .debug_str:00000000000010be .LASF276
     /tmp/ccK9CJjk.s:4761   .debug_str:000000000000040d .LASF291
     /tmp/ccK9CJjk.s:4881   .debug_str:00000000000007b2 .LASF277
     /tmp/ccK9CJjk.s:4959   .debug_str:0000000000000a51 .LASF278
     /tmp/ccK9CJjk.s:925    .text:00000000000003f8 .LVL50
     /tmp/ccK9CJjk.s:935    .text:0000000000000400 .LVL51
     /tmp/ccK9CJjk.s:493    .text:0000000000000234 .LVL22
GAS LISTING /tmp/ccK9CJjk.s 			page 43


     /tmp/ccK9CJjk.s:502    .text:0000000000000238 .LVL23
     /tmp/ccK9CJjk.s:509    .text:000000000000023c .LVL24
     /tmp/ccK9CJjk.s:521    .text:0000000000000244 .LVL25
     /tmp/ccK9CJjk.s:296    .text:0000000000000150 .LVL5
     /tmp/ccK9CJjk.s:300    .text:0000000000000154 .LVL6
     /tmp/ccK9CJjk.s:308    .text:0000000000000164 .LVL7
     /tmp/ccK9CJjk.s:314    .text:0000000000000170 .LVL8
     /tmp/ccK9CJjk.s:327    .text:0000000000000184 .LVL11
     /tmp/ccK9CJjk.s:336    .text:0000000000000188 .LVL12
     /tmp/ccK9CJjk.s:343    .text:000000000000018c .LVL13
     /tmp/ccK9CJjk.s:355    .text:0000000000000194 .LVL14
     /tmp/ccK9CJjk.s:697    .text:00000000000002d0 .LVL30
     /tmp/ccK9CJjk.s:727    .text:00000000000002f0 .LVL33
     /tmp/ccK9CJjk.s:736    .text:00000000000002f4 .LVL34
     /tmp/ccK9CJjk.s:743    .text:00000000000002f8 .LVL35
     /tmp/ccK9CJjk.s:752    .text:00000000000002fc .LVL36
     /tmp/ccK9CJjk.s:385    .text:00000000000001cc .LVL15
     /tmp/ccK9CJjk.s:392    .text:00000000000001d0 .LVL16
     /tmp/ccK9CJjk.s:400    .text:00000000000001d4 .LVL17
     /tmp/ccK9CJjk.s:410    .text:00000000000001dc .LVL18
     /tmp/ccK9CJjk.s:27     .text:0000000000000018 .LVL0
     /tmp/ccK9CJjk.s:38     .text:0000000000000020 .LVL1
     /tmp/ccK9CJjk.s:967    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccK9CJjk.s:252    .text:0000000000000124 .LBB54
     /tmp/ccK9CJjk.s:359    .text:0000000000000194 .LBE54
     /tmp/ccK9CJjk.s:528    .text:0000000000000244 .LBB84
     /tmp/ccK9CJjk.s:544    .text:000000000000025c .LBE84
     /tmp/ccK9CJjk.s:302    .text:0000000000000158 .LBB60
     /tmp/ccK9CJjk.s:316    .text:0000000000000170 .LBE60
     /tmp/ccK9CJjk.s:530    .text:0000000000000244 .LBB61
     /tmp/ccK9CJjk.s:542    .text:000000000000025c .LBE61
     /tmp/ccK9CJjk.s:557    .text:0000000000000268 .LBB85
     /tmp/ccK9CJjk.s:756    .text:00000000000002fc .LBE85
     /tmp/ccK9CJjk.s:764    .text:0000000000000300 .LBB99
     /tmp/ccK9CJjk.s:902    .text:00000000000003e0 .LBE99

UNDEFINED SYMBOLS
_ZN3TCB8userModeE
_ZN3TCB7runningE
_ZN3TCB17prepareThreadExitEv
CONSOLE_STATUS
CONSOLE_RX_DATA
_ZN9myConsole17numberOfCharToGetE
plic_claim
plic_complete
_ZN3TCB16timeSliceCounterE
_ZN13SleepingQueue10wakeUpTCBsEv
_ZN11mySemaphore17tryToUnblockTimerEv
_ZN3TCB8dispatchEv
_ZN9myConsole10putCInBuffEc
_ZN9myConsole11getCOutBuffEv
_ZN15MemoryAllocator15prepareMemAllocEm
_ZN15MemoryAllocator14prepareMemFreeEm
_ZN3TCB19prepareThreadCreateEPPS_PFvPvES2_S2_
_ZN11mySemaphore14prepareSemOpenEPPS_j
_ZN11mySemaphore15prepareSemCloseEPS_
_ZN11mySemaphore14prepareSemWaitEPS_
GAS LISTING /tmp/ccK9CJjk.s 			page 44


_ZN11mySemaphore16prepareSemSignalEPS_
_ZN11mySemaphore19prepareSemTimedWaitEPS_m
_ZN11mySemaphore17prepareSemTryWaitEPS_
_ZN3TCB16prepareTimeSleepEm
_ZN9myConsole11prepareGetCEv
_ZN9myConsole11preparePutCEc
